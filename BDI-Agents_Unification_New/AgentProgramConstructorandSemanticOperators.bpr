<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.prFile version="1">
    <org.eventb.core.prProof name="GetNonBeliefPred/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="fail,ag,back,ag1,succes,agrec,ag2" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="AgentPrograms">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessConditions" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="DGGoalPlanBodies" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureConditions" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="nonGoal">
                    <org.eventb.theory.core.scConstructorArgument name="NDGGoalPlanBodies" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="lhd">
                    <org.eventb.theory.core.scConstructorArgument name="currentplan" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="seq">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="AgentPrograms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="AgentPrograms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="nil"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoal" org.eventb.core.label="isGoal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNonGoal" org.eventb.core.label="isNonGoal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="element1" org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#element1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isLhd" org.eventb.core.label="isLhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeq" org.eventb.core.label="isSeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="element1" org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#element1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrent" org.eventb.core.label="isConcurrent" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="WellCons" org.eventb.core.label="WellCons" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="isNonGoal(agrec)∨isLhd(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="WellCons(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="WellCons(ag1)∧WellCons(ag2)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="WellCons(ag1)∧WellCons(ag2)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetNonBeliefPred" org.eventb.core.label="GetNonBeliefPred" org.eventb.core.predicate="WellCons(ag)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(non_belief_predicates×terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{nonbeliedpred}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="∅ ⦂ ℙ(non_belief_predicates×terms)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GetNonBeliefPred(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetNonBeliefPred(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetNonBeliefPred(ag1)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetNonBeliefPred(ag1)∪GetNonBeliefPred(ag2)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees agrec,fail,succes)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                        <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="fail" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                                        <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p6">
                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=goal(succes,agrec,fail)" org.eventb.core.prHyps="p6">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p8"/>
                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p6"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees agrec,back)" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
                                        <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="back" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p11">
                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=lhd(agrec,back)" org.eventb.core.prHyps="p11">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p12"/>
                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p11"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p13">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag1,ag2)" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
                                        <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p15">
                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=seq(ag1,ag2)" org.eventb.core.prHyps="p15">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p17"/>
                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p15"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p18">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag1,ag2)" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
                                        <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p20">
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=concurrent(ag1,ag2)" org.eventb.core.prHyps="p20">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p22"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p20"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p23">
                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=concurrent(ag1,ag2)" org.eventb.core.prHyps="p20">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p22"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p20"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="WellCons(agrec)">
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="ag=concurrent(ag1,ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="WellCons(ag)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="ag=goal(succes,agrec,fail)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="fail" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="ag=goal(succes,agrec,fail)⇒WellCons(agrec)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="fail" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀ag⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·WellCons(ag)⇒(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),fail⦂ℙ(belief_predicates×terms),succes⦂ℙ(belief_predicates×terms)·ag=goal(succes,agrec,fail)⇒WellCons(agrec))∧(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),back⦂ℙ(non_belief_predicates)×terms·ag=lhd(agrec,back)⇒WellCons(agrec))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=seq(ag1,ag2)⇒WellCons(ag1))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2))"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="WellCons(ag)⇒(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),fail⦂ℙ(belief_predicates×terms),succes⦂ℙ(belief_predicates×terms)·ag=goal(succes,agrec,fail)⇒WellCons(agrec))∧(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),back⦂ℙ(non_belief_predicates)×terms·ag=lhd(agrec,back)⇒WellCons(agrec))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=seq(ag1,ag2)⇒WellCons(ag1))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2))">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="ag=lhd(agrec,back)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="back" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=seq(ag1,ag2)⇒WellCons(ag1)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="WellCons(ag2)">
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="ag=seq(ag1,ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="WellCons(ag1)∧WellCons(ag2)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="WellCons(goal(succes,agrec,fail))">
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="fail" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),back⦂ℙ(non_belief_predicates)×terms·ag=lhd(agrec,back)⇒WellCons(agrec)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="ag=lhd(agrec,back)⇒WellCons(agrec)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="back" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),fail⦂ℙ(belief_predicates×terms),succes⦂ℙ(belief_predicates×terms)·ag=goal(succes,agrec,fail)⇒WellCons(agrec)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),fail⦂ℙ(belief_predicates×terms),succes⦂ℙ(belief_predicates×terms)·ag=goal(succes,agrec,fail)⇒WellCons(agrec))∧(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),back⦂ℙ(non_belief_predicates)×terms·ag=lhd(agrec,back)⇒WellCons(agrec))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=seq(ag1,ag2)⇒WellCons(ag1))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2))">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="ag=seq(ag1,ag2)⇒WellCons(ag1)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="WellCons(concurrent(ag1,ag2))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="WellCons(seq(ag1,ag2))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="WellCons(lhd(agrec,back))">
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="back" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="WellCons(ag1)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="remove/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="ag,ag1bis,ag2bis,ag1,non_belief,ag2" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="AgentPrograms">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessConditions" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="DGGoalPlanBodies" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureConditions" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="nonGoal">
                    <org.eventb.theory.core.scConstructorArgument name="NDGGoalPlanBodies" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="lhd">
                    <org.eventb.theory.core.scConstructorArgument name="currentplan" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="seq">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="AgentPrograms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="AgentPrograms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="nil"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoal" org.eventb.core.label="isGoal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNonGoal" org.eventb.core.label="isNonGoal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="element1" org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#element1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isLhd" org.eventb.core.label="isLhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeq" org.eventb.core.label="isSeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="element1" org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#element1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrent" org.eventb.core.label="isConcurrent" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="WellCons" org.eventb.core.label="WellCons" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="isNonGoal(agrec)∨isLhd(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="WellCons(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="WellCons(ag1)∧WellCons(ag2)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="WellCons(ag1)∧WellCons(ag2)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetNonBeliefPred" org.eventb.core.label="GetNonBeliefPred" org.eventb.core.predicate="WellCons(ag)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(non_belief_predicates×terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{nonbeliedpred}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="∅ ⦂ ℙ(non_belief_predicates×terms)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GetNonBeliefPred(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetNonBeliefPred(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetNonBeliefPred(ag1)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetNonBeliefPred(ag1)∪GetNonBeliefPred(ag2)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="remove" org.eventb.core.label="remove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(AgentPrograms(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="non_belief" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="non_belief_predicates×terms"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="element1" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{a⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·a∈AgentPrograms(belief_predicates,non_belief_predicates,terms)∧((a=(nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms))∧nonbeliefpred=non_belief)∨(a=nonGoal(nonbeliefpred)∧nonbeliefpred≠non_belief)) ∣ a}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{a⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·a=(nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms))∧a∈AgentPrograms(belief_predicates,non_belief_predicates,terms) ∣ a}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="{agbis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·agbis∈remove(agrec,non_belief) ∣ goal(succes,agbis,fail)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{agbis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·agbis∈remove(agrec,non_belief) ∣ lhd(agbis,back)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{agbis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·agbis∈remove(ag2,non_belief) ∣ seq(agbis,ag2)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨(ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(non_belief∈GetNonBeliefPred(ag1)∧non_belief∈GetNonBeliefPred(ag2)∧ag1bis=ag1∧ag2bis=ag2) ∣ concurrent(ag1bis,ag2bis)}"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag,non_belief,ag1,ag2)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                        <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
                        <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                        <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag1bis,ag2bis)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p7,p8">
                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=concurrent(ag1,ag2)" org.eventb.core.prHyps="p3">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p3"/>
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag2bis=ag2" org.eventb.core.prHyps="p8">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag1bis,ag2bis)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
                                                <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=concurrent(ag1,ag2)" org.eventb.core.prHyps="p3">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p3"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="ag=concurrent(ag1,ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="ag1bis∈remove(ag1,non_belief)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2)))))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀ag⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),non_belief⦂non_belief_predicates×terms,ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1))∧(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2))))))"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="ag=concurrent(ag1,ag2)⇒(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1))∧(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2))))))">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="ag2bis=ag2">
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2)))))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1))∧(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2))))))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀ag⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),non_belief⦂non_belief_predicates×terms·⊤⇒(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1))∧((ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2))))))))"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="WellCons(ag1)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="UserP2Plan_body/Op-WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicP" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Seq">
                    <org.eventb.theory.core.scConstructorArgument name="leftSeq" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightSeq" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="leftConc" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightConc" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccesUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="EventUser" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="Plan_body">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="NilComp"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicPComp">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicPB" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="SeqComp">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="ConcurrentComp">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="GoalComp">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="getGoalPlanBody" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Rhd">
                    <org.eventb.theory.core.scConstructorArgument name="current" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="EventComp">
                    <org.eventb.theory.core.scConstructorArgument name="getEvent" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="UserPlan" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×UserP(belief_predicates,non_belief_predicates,terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isEventComp" org.eventb.core.label="isEventComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP2Plan_body" org.eventb.core.label="UserP2Plan_body" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="uP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="uP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Goal(success,evtxterms,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GoalComp(success,BasicPComp(evtxterms),fail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(nonbeliefpred))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="SeqComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="ConcurrentComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirsts" org.eventb.core.label="GetFirsts" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({BasicPComp(evt)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{EventComp(evt,planlib)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetFirsts(l)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetFirsts(l)∪GetFirsts(r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{GoalComp(succes,planrec,failure)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="GetFirsts(cur)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update" org.eventb.core.label="update" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="prev" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(update(l,prev,new),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(prev1≠GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Rhd(update(cur,prev,new),back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicComp" org.eventb.core.label="isBasicComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeqComp" org.eventb.core.label="isSeqComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrentComp" org.eventb.core.label="isConcurrentComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoalComp" org.eventb.core.label="isGoalComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRhd" org.eventb.core.label="isRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNilComp" org.eventb.core.label="isNilComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan_body" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan_body">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,userplan)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,userplan)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="GoalComp(success,plan,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GoalComp(success,NilRemove(plan),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=r1)∨(¬isNilComp(l1)∧plan=SeqComp(NilRemove(l1),r1)) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms),l2⦂Plan_body(belief_predicates,non_belief_predicates,terms),r2⦂Plan_body(belief_predicates,non_belief_predicates,terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNilComp(l2)∧isNilComp(r2)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨((¬isNilComp(l2)∨¬isNilComp(r2))∧plan=ConcurrentComp(l2,r2))) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(plan,plans)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(NilRemove(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}(plan ↦ plans)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Failure_Recovery" org.eventb.core.label="Failure_Recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,planlib)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(Failure_Recovery(l,first_element,rhs),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="ConcurrentComp(Failure_Recovery(l,first_element,rhs),Failure_Recovery(r,first_element,rhs))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GoalComp(succes,Failure_Recovery(planrec,first_element,rhs),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}(cur ↦ back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirstRhd" org.eventb.core.label="GetFirstRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="GetFirstRhd(l,first_element,rhs)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(pre∉GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="GoalComp(success,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(prev1≠GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetFirstRhd(cur,first_element,back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps=""/>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀uP⦂UserP(belief_predicates,non_belief_predicates,terms),nonbeliefpred⦂non_belief_predicates×terms·uP=BasicP(nonbeliefpred)⇒nonbeliefpred∈non_belief_predicates × terms"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀uP⦂UserP(belief_predicates,non_belief_predicates,terms)·⊤⇒(∀nonbeliefpred⦂non_belief_predicates×terms·uP=BasicP(nonbeliefpred)⇒BasicPComp(nonbeliefpred)∈dom(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))∧Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms)))∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀uP⦂UserP(belief_predicates,non_belief_predicates,terms),nonbeliefpred⦂non_belief_predicates×terms·uP=BasicP(nonbeliefpred)⇒⊤"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="GetFirsts/Op-WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicP" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Seq">
                    <org.eventb.theory.core.scConstructorArgument name="leftSeq" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightSeq" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="leftConc" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightConc" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccesUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="EventUser" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="Plan_body">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="NilComp"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicPComp">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicPB" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="SeqComp">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="ConcurrentComp">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="GoalComp">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="getGoalPlanBody" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Rhd">
                    <org.eventb.theory.core.scConstructorArgument name="current" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="EventComp">
                    <org.eventb.theory.core.scConstructorArgument name="getEvent" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="UserPlan" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×UserP(belief_predicates,non_belief_predicates,terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isEventComp" org.eventb.core.label="isEventComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP2Plan_body" org.eventb.core.label="UserP2Plan_body" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="uP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="uP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Goal(success,evtxterms,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GoalComp(success,BasicPComp(evtxterms),fail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(nonbeliefpred))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="SeqComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="ConcurrentComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirsts" org.eventb.core.label="GetFirsts" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({BasicPComp(evt)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{EventComp(evt,planlib)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetFirsts(l)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetFirsts(l)∪GetFirsts(r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{GoalComp(succes,planrec,failure)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="GetFirsts(cur)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update" org.eventb.core.label="update" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="prev" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(update(l,prev,new),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(prev1≠GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Rhd(update(cur,prev,new),back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicComp" org.eventb.core.label="isBasicComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeqComp" org.eventb.core.label="isSeqComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrentComp" org.eventb.core.label="isConcurrentComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoalComp" org.eventb.core.label="isGoalComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRhd" org.eventb.core.label="isRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNilComp" org.eventb.core.label="isNilComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan_body" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan_body">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,userplan)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,userplan)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="GoalComp(success,plan,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GoalComp(success,NilRemove(plan),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=r1)∨(¬isNilComp(l1)∧plan=SeqComp(NilRemove(l1),r1)) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms),l2⦂Plan_body(belief_predicates,non_belief_predicates,terms),r2⦂Plan_body(belief_predicates,non_belief_predicates,terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNilComp(l2)∧isNilComp(r2)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨((¬isNilComp(l2)∨¬isNilComp(r2))∧plan=ConcurrentComp(l2,r2))) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(plan,plans)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(NilRemove(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}(plan ↦ plans)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Failure_Recovery" org.eventb.core.label="Failure_Recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,planlib)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(Failure_Recovery(l,first_element,rhs),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="ConcurrentComp(Failure_Recovery(l,first_element,rhs),Failure_Recovery(r,first_element,rhs))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GoalComp(succes,Failure_Recovery(planrec,first_element,rhs),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}(cur ↦ back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirstRhd" org.eventb.core.label="GetFirstRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="GetFirstRhd(l,first_element,rhs)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(pre∉GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="GoalComp(success,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(prev1≠GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetFirstRhd(cur,first_element,back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps=""/>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒{NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)}∈ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))∧(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),evt⦂non_belief_predicates×terms·plan=BasicPComp(evt)⇒{BasicPComp(evt)}∈ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))∧(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan=(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒{False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)}∈ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒⊤)∧(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),evt⦂non_belief_predicates×terms·plan=BasicPComp(evt)⇒⊤)∧(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan=(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒⊤)"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·⊤⇒(plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒{NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)}∈dom(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))∧ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))))∈ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ⇸ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))∧(∀evt⦂non_belief_predicates×terms·plan=BasicPComp(evt)⇒{BasicPComp(evt)}∈dom(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))∧ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))))∈ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ⇸ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))∧(plan=(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒{False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)}∈dom(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))∧ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))))∈ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ⇸ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="update/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="new,r,failure,prev,planrec,l,succes,plan" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicP" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Seq">
                    <org.eventb.theory.core.scConstructorArgument name="leftSeq" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightSeq" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="leftConc" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightConc" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccesUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="EventUser" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="Plan_body">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="NilComp"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicPComp">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicPB" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="SeqComp">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="ConcurrentComp">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="GoalComp">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="getGoalPlanBody" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Rhd">
                    <org.eventb.theory.core.scConstructorArgument name="current" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="EventComp">
                    <org.eventb.theory.core.scConstructorArgument name="getEvent" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="UserPlan" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×UserP(belief_predicates,non_belief_predicates,terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isEventComp" org.eventb.core.label="isEventComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP2Plan_body" org.eventb.core.label="UserP2Plan_body" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="uP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="uP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Goal(success,evtxterms,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GoalComp(success,BasicPComp(evtxterms),fail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(nonbeliefpred))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="SeqComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="ConcurrentComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirsts" org.eventb.core.label="GetFirsts" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({BasicPComp(evt)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{EventComp(evt,planlib)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetFirsts(l)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetFirsts(l)∪GetFirsts(r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{GoalComp(succes,planrec,failure)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="GetFirsts(cur)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update" org.eventb.core.label="update" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="prev" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(update(l,prev,new),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(prev1≠GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Rhd(update(cur,prev,new),back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicComp" org.eventb.core.label="isBasicComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeqComp" org.eventb.core.label="isSeqComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrentComp" org.eventb.core.label="isConcurrentComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoalComp" org.eventb.core.label="isGoalComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRhd" org.eventb.core.label="isRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNilComp" org.eventb.core.label="isNilComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan_body" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan_body">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,userplan)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,userplan)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="GoalComp(success,plan,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GoalComp(success,NilRemove(plan),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=r1)∨(¬isNilComp(l1)∧plan=SeqComp(NilRemove(l1),r1)) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms),l2⦂Plan_body(belief_predicates,non_belief_predicates,terms),r2⦂Plan_body(belief_predicates,non_belief_predicates,terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNilComp(l2)∧isNilComp(r2)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨((¬isNilComp(l2)∨¬isNilComp(r2))∧plan=ConcurrentComp(l2,r2))) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(plan,plans)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(NilRemove(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}(plan ↦ plans)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Failure_Recovery" org.eventb.core.label="Failure_Recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,planlib)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(Failure_Recovery(l,first_element,rhs),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="ConcurrentComp(Failure_Recovery(l,first_element,rhs),Failure_Recovery(r,first_element,rhs))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GoalComp(succes,Failure_Recovery(planrec,first_element,rhs),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}(cur ↦ back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirstRhd" org.eventb.core.label="GetFirstRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="GetFirstRhd(l,first_element,rhs)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(pre∉GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="GoalComp(success,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(prev1≠GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetFirstRhd(cur,first_element,back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees plan,prev,new,l,r)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan=ConcurrentComp(l,r)" org.eventb.core.prHyps="p4">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan=ConcurrentComp(l,r)" org.eventb.core.prHyps="p4">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees plan,prev,new,failure,planrec,succes)" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
                                <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                                <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p10">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan=GoalComp(succes,planrec,failure)" org.eventb.core.prHyps="p10">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan=GoalComp(succes,planrec,failure)" org.eventb.core.prHyps="p10">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(¬prev1=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="plan=ConcurrentComp(l,r)⇒((∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(update(l,prev,new),r))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,prev,new)))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(l,r)))∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(¬pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="((∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(update(l,prev,new),r))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,prev,new)))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(l,r)))∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(¬pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),prev⦂Plan_body(belief_predicates,non_belief_predicates,terms),new⦂Plan_body(belief_predicates,non_belief_predicates,terms)·⊤⇒(plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))∈dom(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))∧Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms)))∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(plan=(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))∈dom(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))∧Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms)))∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan=ConcurrentComp(l,r)⇒prev∈dom({pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne})∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀failure⦂ℙ(belief_predicates×terms),planrec⦂Plan_body(belief_predicates,non_belief_predicates,terms),succes⦂ℙ(belief_predicates×terms)·plan=GoalComp(succes,planrec,failure)⇒prev∈dom({prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(prev1≠GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1})∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(prev1≠GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="plan=GoalComp(succes,planrec,failure)">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(update(l,prev,new),r))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,prev,new)))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(l,r))">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="((∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev=GoalComp(succes,planrec,failure)∧new1=new)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)))∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(¬prev1=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),prev⦂Plan_body(belief_predicates,non_belief_predicates,terms),new⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan=ConcurrentComp(l,r)⇒((∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(update(l,prev,new),r))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,prev,new)))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(l,r)))∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(¬pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev=GoalComp(succes,planrec,failure)∧new1=new)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure))">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="plan=ConcurrentComp(l,r)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),prev⦂Plan_body(belief_predicates,non_belief_predicates,terms),new⦂Plan_body(belief_predicates,non_belief_predicates,terms),failure⦂ℙ(belief_predicates×terms),planrec⦂Plan_body(belief_predicates,non_belief_predicates,terms),succes⦂ℙ(belief_predicates×terms)·plan=GoalComp(succes,planrec,failure)⇒((∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev=GoalComp(succes,planrec,failure)∧new1=new)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)))∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(¬prev1=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),prev⦂Plan_body(belief_predicates,non_belief_predicates,terms),new⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan=ConcurrentComp(l,r)⇒((∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(update(l,prev,new),r))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,prev,new)))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev∈GetFirsts(l)∧¬prev∈GetFirsts(r)∧ne=ConcurrentComp(l,r)))∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(¬pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),prev⦂Plan_body(belief_predicates,non_belief_predicates,terms),new⦂Plan_body(belief_predicates,non_belief_predicates,terms),failure⦂ℙ(belief_predicates×terms),planrec⦂Plan_body(belief_predicates,non_belief_predicates,terms),succes⦂ℙ(belief_predicates×terms)·plan=GoalComp(succes,planrec,failure)⇒((∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev=GoalComp(succes,planrec,failure)∧new1=new)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)))∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(¬prev1=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="plan=GoalComp(succes,planrec,failure)⇒((∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·prev=GoalComp(succes,planrec,failure)∧new1=new)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬prev=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)))∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(¬prev1=GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="prev" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(¬pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="Normalise/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="plan_body,r,plans,l,plan" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicP" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Seq">
                    <org.eventb.theory.core.scConstructorArgument name="leftSeq" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightSeq" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="leftConc" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightConc" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccesUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="EventUser" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="Plan_body">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="NilComp"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicPComp">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicPB" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="SeqComp">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="ConcurrentComp">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="GoalComp">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="getGoalPlanBody" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Rhd">
                    <org.eventb.theory.core.scConstructorArgument name="current" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="EventComp">
                    <org.eventb.theory.core.scConstructorArgument name="getEvent" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="UserPlan" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isEventComp" org.eventb.core.label="isEventComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP2Plan_body" org.eventb.core.label="UserP2Plan_body" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="uP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="uP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Goal(success,evtxterms,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GoalComp(success,BasicPComp(evtxterms),fail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(nonbeliefpred))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="SeqComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="ConcurrentComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirsts" org.eventb.core.label="GetFirsts" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({BasicPComp(evt)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{EventComp(evt,planlib)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetFirsts(l)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetFirsts(l)∪GetFirsts(r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{GoalComp(succes,planrec,failure)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="GetFirsts(cur)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update" org.eventb.core.label="update" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="prev" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(update(l,prev,new),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GoalComp(succes,update(planrec,prev,new),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Rhd(update(cur,prev,new),back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicComp" org.eventb.core.label="isBasicComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeqComp" org.eventb.core.label="isSeqComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrentComp" org.eventb.core.label="isConcurrentComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoalComp" org.eventb.core.label="isGoalComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRhd" org.eventb.core.label="isRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNilComp" org.eventb.core.label="isNilComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Normalise" org.eventb.core.label="Normalise" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan_body" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan_body">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,userplan)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,userplan)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="GoalComp(success,plan,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GoalComp(success,Normalise(plan),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(plan,plans)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}(plan ↦ plans)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees plan_body,l,r)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                                <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p6">
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan_body=SeqComp(l,r)" org.eventb.core.prHyps="p6">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan_body=SeqComp(l,r)" org.eventb.core.prHyps="p6">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees plan_body,l,r)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
                                                <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p12">
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan_body=ConcurrentComp(l,r)" org.eventb.core.prHyps="p12">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan_body=ConcurrentComp(l,r)" org.eventb.core.prHyps="p12">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p16">
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees plan_body,plan,plans)" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
                                                <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="plans" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p18">
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan_body=Rhd(plan,plans)" org.eventb.core.prHyps="p18">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p18"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with plan_body=Rhd(plan,plans)" org.eventb.core.prHyps="p18">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p18"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="plan_body=SeqComp(l,r)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=ConcurrentComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧¬isNilComp(r)∧plan=ConcurrentComp(l,Normalise(r)))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧isNilComp(r)∧plan=ConcurrentComp(Normalise(l),r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧isNilComp(r)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="plan_body=ConcurrentComp(l,r)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms)·⊤⇒(plan_body=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))∈dom(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))∧Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms)))∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀evt⦂non_belief_predicates×terms·plan_body=BasicPComp(evt)⇒BasicPComp(evt)∈dom(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))∧Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms)))∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=SeqComp(l,r)⇒l ↦ r∈dom({plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan})∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=ConcurrentComp(l,r)⇒l ↦ r∈dom({plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan})∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=Rhd(plan,plans)⇒plan ↦ plans∈dom({finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan})∧{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧¬isNilComp(r)∧plan=ConcurrentComp(l,Normalise(r)))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧isNilComp(r)∧plan=ConcurrentComp(Normalise(l),r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧isNilComp(r)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧plan=Normalise(r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧plan=SeqComp(Normalise(l),r))">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="plan_body=SeqComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧plan=Normalise(r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧plan=SeqComp(Normalise(l),r)))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="plan_body=Rhd(plan,plans)⇒((∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(plan)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(plan)∧finalplan=Rhd(Normalise(plan),plans)))∧{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plans" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),evt⦂non_belief_predicates×terms·plan_body=BasicPComp(evt)⇒evt∈non_belief_predicates × terms)∧(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=SeqComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧plan=Normalise(r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧plan=SeqComp(Normalise(l),r)))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=ConcurrentComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧¬isNilComp(r)∧plan=ConcurrentComp(l,Normalise(r)))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧isNilComp(r)∧plan=ConcurrentComp(Normalise(l),r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧isNilComp(r)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=Rhd(plan,plans)⇒((∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(plan)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(plan)∧finalplan=Rhd(Normalise(plan),plans)))∧{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="(∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(plan)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(plan)∧finalplan=Rhd(Normalise(plan),plans))">
            <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plans" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="plan_body=Rhd(plan,plans)">
            <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plans" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=SeqComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧plan=Normalise(r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧plan=SeqComp(Normalise(l),r)))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=ConcurrentComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧¬isNilComp(r)∧plan=ConcurrentComp(l,Normalise(r)))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧isNilComp(r)∧plan=ConcurrentComp(Normalise(l),r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧isNilComp(r)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=Rhd(plan,plans)⇒((∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(plan)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(plan)∧finalplan=Rhd(Normalise(plan),plans)))∧{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),evt⦂non_belief_predicates×terms·plan_body=BasicPComp(evt)⇒⊤)∧(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=SeqComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧plan=Normalise(r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧plan=SeqComp(Normalise(l),r)))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=ConcurrentComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧¬isNilComp(r)∧plan=ConcurrentComp(l,Normalise(r)))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧isNilComp(r)∧plan=ConcurrentComp(Normalise(l),r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧isNilComp(r)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=Rhd(plan,plans)⇒((∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(plan)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(plan)∧finalplan=Rhd(Normalise(plan),plans)))∧{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧plan=Normalise(r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧plan=SeqComp(Normalise(l),r)))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=SeqComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧plan=Normalise(r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧plan=SeqComp(Normalise(l),r)))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=Normalise(r1))∨(¬isNilComp(l1)∧plan=SeqComp(Normalise(l1),r1)) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="plan_body=ConcurrentComp(l,r)⇒((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧¬isNilComp(r)∧plan=ConcurrentComp(l,Normalise(r)))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧isNilComp(r)∧plan=ConcurrentComp(Normalise(l),r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧isNilComp(r)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plan_body" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="((∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧¬isNilComp(r)∧plan=ConcurrentComp(l,Normalise(r)))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(l)∧isNilComp(r)∧plan=ConcurrentComp(Normalise(l),r))∨(∃plan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(l)∧isNilComp(r)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))))∧{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧¬isNilComp(r1)∧plan=ConcurrentComp(l1,Normalise(r1)))∨(¬isNilComp(l1)∧isNilComp(r1)∧plan=ConcurrentComp(Normalise(l1),r1))∨(isNilComp(l1)∧isNilComp(r1)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))) ∣ l1 ↦ r1 ↦ plan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="∀plan_body⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans⦂Plan_body(belief_predicates,non_belief_predicates,terms)·plan_body=Rhd(plan,plans)⇒((∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(plan)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(plan)∧finalplan=Rhd(Normalise(plan),plans)))∧{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="((∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·isNilComp(plan)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(∃finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬isNilComp(plan)∧finalplan=Rhd(Normalise(plan),plans)))∧{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(Normalise(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="plan" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="plans" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="NilRemove/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="head,current,left,tail,right,intention,backups" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,head,tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p6">
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Sequence_intention(head,tail)" org.eventb.core.prHyps="p6">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Sequence_intention(head,tail)" org.eventb.core.prHyps="p6">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,left,right)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
                                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p12">
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
                                                                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18">
                                                                                <org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps=""/>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18">
                                                                        <org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps=""/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p20">
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,backups,current)" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
                                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p22">
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Try_current_with_backups(current,backups)" org.eventb.core.prHyps="p22">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p22"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25">
                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Try_current_with_backups(current,backups)" org.eventb.core.prHyps="p22">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p22"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="intention=Sequence_intention(head,tail)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(head)∧new_intention=tail)∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(head)∧new_intention=Sequence_intention(NilRemove(head),tail)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="intention=Try_current_with_backups(current,backups)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(current)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(current)∧new_intention=Try_current_with_backups(NilRemove(current),backups)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Sequence_intention(head,tail)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(head)∧new_intention=tail)∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(head)∧new_intention=Sequence_intention(NilRemove(head),tail)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Concurrency_intention(left,right)⇒(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(left)∧r2=NilRemove(right)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Try_current_with_backups(current,backups)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(current)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(current)∧new_intention=Try_current_with_backups(NilRemove(current),backups)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="intention=Concurrency_intention(left,right)⇒(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(left)∧r2=NilRemove(right)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(current)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(current)∧new_intention=Try_current_with_backups(NilRemove(current),backups)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Concurrency_intention(left,right)⇒(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(left)∧r2=NilRemove(right)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Try_current_with_backups(current,backups)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(current)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(current)∧new_intention=Try_current_with_backups(NilRemove(current),backups)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_event⦂Event_predicate_symbols×Terms·intention=BasicP_event_intention(basic_program_event)⇒⊤)∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_action⦂Action_predicate_symbols×Terms·intention=BasicP_action_intention(basic_program_action)⇒⊤)∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Sequence_intention(head,tail)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(head)∧new_intention=tail)∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(head)∧new_intention=Sequence_intention(NilRemove(head),tail)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Concurrency_intention(left,right)⇒(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(left)∧r2=NilRemove(right)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Try_current_with_backups(current,backups)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(current)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(current)∧new_intention=Try_current_with_backups(NilRemove(current),backups)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="intention=Concurrency_intention(left,right)">
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(head)∧new_intention=tail)∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(head)∧new_intention=Sequence_intention(NilRemove(head),tail)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Sequence_intention(head,tail)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(head)∧new_intention=tail)∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(head)∧new_intention=Sequence_intention(NilRemove(head),tail)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="intention=Sequence_intention(head,tail)">
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·r2=NilRemove(right)∧((isNil(NilRemove(left))∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(NilRemove(left))∨¬isNil(r2))∧new_intention=Concurrency_intention(NilRemove(left),r2)))">
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(NilRemove(left))∧isNil(NilRemove(right))∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬isNil(NilRemove(left))∨¬isNil(NilRemove(right)))∧new_intention=Concurrency_intention(NilRemove(left),NilRemove(right)))">
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(left)∧r2=NilRemove(right)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(NilRemove(left))∧isNil(NilRemove(right))∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(NilRemove(left))∨¬isNil(NilRemove(right)))∧new_intention=Concurrency_intention(NilRemove(left),NilRemove(right)))">
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤⇒(∀basic_program_event⦂Event_predicate_symbols×Terms·intention=BasicP_event_intention(basic_program_event)⇒BasicP_event_intention(basic_program_event)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀basic_program_action⦂Action_predicate_symbols×Terms·intention=BasicP_action_intention(basic_program_action)⇒BasicP_action_intention(basic_program_action)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(intention=(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Sequence_intention(head,tail)⇒head ↦ tail∈dom({new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention})∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Concurrency_intention(left,right)⇒left ↦ right∈dom({new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention})∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Try_current_with_backups(current,backups)⇒current ↦ backups∈dom({new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention})∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(head)∧new_intention=tail)∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(head)∧new_intention=Sequence_intention(NilRemove(head),tail))">
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_event⦂Event_predicate_symbols×Terms·intention=BasicP_event_intention(basic_program_event)⇒basic_program_event∈Event_predicate_symbols × Terms)∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_action⦂Action_predicate_symbols×Terms·intention=BasicP_action_intention(basic_program_action)⇒basic_program_action∈Action_predicate_symbols × Terms)∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Sequence_intention(head,tail)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(head)∧new_intention=tail)∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(head)∧new_intention=Sequence_intention(NilRemove(head),tail)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Concurrency_intention(left,right)⇒(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(left)∧r2=NilRemove(right)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Try_current_with_backups(current,backups)⇒((∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(current)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(current)∧new_intention=Try_current_with_backups(NilRemove(current),backups)))∧{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(left)∧r2=NilRemove(right)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2)))">
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="intention=Try_current_with_backups(current,backups)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·isNil(current)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(∃new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬isNil(current)∧new_intention=Try_current_with_backups(NilRemove(current),backups))">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.onePointRule:2"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="Unprogressable/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="evt,planlib,beliefs,planlib1,terms0,intention" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicP" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Seq">
                    <org.eventb.theory.core.scConstructorArgument name="leftSeq" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightSeq" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="leftConc" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightConc" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccesUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="EventUser" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="Plan_body">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="NilComp"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicPComp">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicPB" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="SeqComp">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="ConcurrentComp">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="GoalComp">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="getGoalPlanBody" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Rhd">
                    <org.eventb.theory.core.scConstructorArgument name="current" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="EventComp">
                    <org.eventb.theory.core.scConstructorArgument name="getEvent" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="UserPlan" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isEventComp" org.eventb.core.label="isEventComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP2Plan_body" org.eventb.core.label="UserP2Plan_body" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="uP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="uP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Goal(success,evtxterms,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GoalComp(success,BasicPComp(evtxterms),fail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(nonbeliefpred))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="SeqComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="ConcurrentComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirsts" org.eventb.core.label="GetFirsts" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({BasicPComp(evt)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{EventComp(evt,planlib)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetFirsts(l)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetFirsts(l)∪GetFirsts(r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{GoalComp(succes,planrec,failure)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{Rhd(cur,back)}"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update" org.eventb.core.label="update" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="prev" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(update(l,prev,new),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(prev1≠GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=Rhd(cur,back)∧new1=new)∨(prev1≠Rhd(cur,back)∧new1=Rhd(update(cur,prev,new),back)) ∣ prev1 ↦ new1}(prev)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicComp" org.eventb.core.label="isBasicComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeqComp" org.eventb.core.label="isSeqComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrentComp" org.eventb.core.label="isConcurrentComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoalComp" org.eventb.core.label="isGoalComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRhd" org.eventb.core.label="isRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNilComp" org.eventb.core.label="isNilComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan_body" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan_body">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,userplan)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,userplan)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="GoalComp(success,plan,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GoalComp(success,NilRemove(plan),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=r1)∨(¬isNilComp(l1)∧plan=SeqComp(NilRemove(l1),r1)) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms),l2⦂Plan_body(belief_predicates,non_belief_predicates,terms),r2⦂Plan_body(belief_predicates,non_belief_predicates,terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNilComp(l2)∧isNilComp(r2)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨((¬isNilComp(l2)∨¬isNilComp(r2))∧plan=ConcurrentComp(l2,r2))) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(plan,plans)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(NilRemove(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}(plan ↦ plans)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Unprogressable" org.eventb.core.label="Unprogressable" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="beliefs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="Preconditions" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(non_belief_predicates×terms×(belief_predicates×terms))"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="¬Preconditions[{evt}]⊆beliefs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="evt ↦ planlib∈{event⦂non_belief_predicates,terms⦂terms,planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·planlib1(beliefs ↦ terms)=(∅ ⦂ ℙ(UserP(belief_predicates,non_belief_predicates,terms))) ∣ event ↦ terms ↦ planlib1}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Unprogressable(l,beliefs,Preconditions)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Unprogressable(l,beliefs,Preconditions)∨Unprogressable(r,beliefs,Preconditions)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Unprogressable(planrec,beliefs,Preconditions)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Unprogressable(cur,beliefs,Preconditions)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,beliefs,evt,planlib)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                        <org.eventb.core.prIdent name="beliefs" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                        <org.eventb.core.prIdent name="evt" org.eventb.core.type="non_belief_predicates×terms"/>
                        <org.eventb.core.prIdent name="planlib" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees terms0,planlib1)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prIdent name="terms0" org.eventb.core.type="terms"/>
                                                <org.eventb.core.prIdent name="planlib1" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=EventComp(evt,planlib)" org.eventb.core.prHyps="p3">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p3"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees planlib1)" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
                                                <org.eventb.core.prIdent name="planlib1" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=EventComp(evt,planlib)" org.eventb.core.prHyps="p3">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p3"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="intention=EventComp(evt,planlib)">
            <org.eventb.core.prIdent name="evt" org.eventb.core.type="non_belief_predicates×terms"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planlib" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="beliefs ↦ terms0∈dom(planlib1)">
            <org.eventb.core.prIdent name="beliefs" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="planlib1" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
            <org.eventb.core.prIdent name="terms0" org.eventb.core.type="terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),beliefs⦂ℙ(belief_predicates×terms),Preconditions⦂ℙ(non_belief_predicates×terms×(belief_predicates×terms))·⊤⇒(∀evt⦂non_belief_predicates×terms,planlib⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·intention=EventComp(evt,planlib)⇒(∀terms0⦂terms,planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·beliefs ↦ terms0∈dom(planlib1)∧planlib1∈ℙ(belief_predicates × terms) × terms ⇸ ℙ(UserP(belief_predicates,non_belief_predicates,terms))))"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="(∀terms0⦂terms,planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·beliefs ↦ terms0∈dom(planlib1))∧(∀planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·planlib1∈ℙ(belief_predicates × terms) × terms ⇸ ℙ(UserP(belief_predicates,non_belief_predicates,terms)))">
            <org.eventb.core.prIdent name="beliefs" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="planlib1∈ℙ(belief_predicates × terms) × terms ⇸ ℙ(UserP(belief_predicates,non_belief_predicates,terms))">
            <org.eventb.core.prIdent name="planlib1" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),beliefs⦂ℙ(belief_predicates×terms),evt⦂non_belief_predicates×terms,planlib⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·intention=EventComp(evt,planlib)⇒(∀terms0⦂terms,planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·beliefs ↦ terms0∈dom(planlib1))∧(∀planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·planlib1∈ℙ(belief_predicates × terms) × terms ⇸ ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="∀planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·planlib1∈ℙ(belief_predicates × terms) × terms ⇸ ℙ(UserP(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="intention=EventComp(evt,planlib)⇒(∀terms0⦂terms,planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·beliefs ↦ terms0∈dom(planlib1))∧(∀planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·planlib1∈ℙ(belief_predicates × terms) × terms ⇸ ℙ(UserP(belief_predicates,non_belief_predicates,terms)))">
            <org.eventb.core.prIdent name="beliefs" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="evt" org.eventb.core.type="non_belief_predicates×terms"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planlib" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀terms0⦂terms,planlib1⦂ℙ(ℙ(belief_predicates×terms)×terms×ℙ(UserP(belief_predicates,non_belief_predicates,terms)))·beliefs ↦ terms0∈dom(planlib1)">
            <org.eventb.core.prIdent name="beliefs" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="GetFirstRhd/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="r,first_element,failure,success,planrec,rhs,l,intention" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicP" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Seq">
                    <org.eventb.theory.core.scConstructorArgument name="leftSeq" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightSeq" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="leftConc" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightConc" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccesUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="EventUser" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="Plan_body">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="NilComp"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicPComp">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicPB" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="SeqComp">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="ConcurrentComp">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="GoalComp">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="getGoalPlanBody" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Rhd">
                    <org.eventb.theory.core.scConstructorArgument name="current" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="EventComp">
                    <org.eventb.theory.core.scConstructorArgument name="getEvent" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="UserPlan" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×UserP(belief_predicates,non_belief_predicates,terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isEventComp" org.eventb.core.label="isEventComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP2Plan_body" org.eventb.core.label="UserP2Plan_body" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="uP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="uP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Goal(success,evtxterms,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GoalComp(success,BasicPComp(evtxterms),fail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(nonbeliefpred))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="SeqComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="ConcurrentComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirsts" org.eventb.core.label="GetFirsts" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({BasicPComp(evt)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{EventComp(evt,planlib)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetFirsts(l)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetFirsts(l)∪GetFirsts(r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{GoalComp(succes,planrec,failure)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="GetFirsts(cur)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update" org.eventb.core.label="update" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="prev" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(update(l,prev,new),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(prev1≠GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Rhd(update(cur,prev,new),back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicComp" org.eventb.core.label="isBasicComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeqComp" org.eventb.core.label="isSeqComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrentComp" org.eventb.core.label="isConcurrentComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoalComp" org.eventb.core.label="isGoalComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRhd" org.eventb.core.label="isRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNilComp" org.eventb.core.label="isNilComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan_body" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan_body">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,userplan)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,userplan)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="GoalComp(success,plan,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GoalComp(success,NilRemove(plan),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=r1)∨(¬isNilComp(l1)∧plan=SeqComp(NilRemove(l1),r1)) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms),l2⦂Plan_body(belief_predicates,non_belief_predicates,terms),r2⦂Plan_body(belief_predicates,non_belief_predicates,terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNilComp(l2)∧isNilComp(r2)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨((¬isNilComp(l2)∨¬isNilComp(r2))∧plan=ConcurrentComp(l2,r2))) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(plan,plans)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(NilRemove(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}(plan ↦ plans)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Failure_Recovery" org.eventb.core.label="Failure_Recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,planlib)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(Failure_Recovery(l,first_element,rhs),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="ConcurrentComp(Failure_Recovery(l,first_element,rhs),Failure_Recovery(r,first_element,rhs))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GoalComp(succes,Failure_Recovery(planrec,first_element,rhs),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}(cur ↦ back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirstRhd" org.eventb.core.label="GetFirstRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="GetFirstRhd(l,first_element,rhs)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(pre∉GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="GoalComp(success,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(prev1≠GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetFirstRhd(cur,first_element,back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,first_element,rhs,l,r)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=ConcurrentComp(l,r)" org.eventb.core.prHyps="p4">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=ConcurrentComp(l,r)" org.eventb.core.prHyps="p4">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,first_element,rhs,failure,planrec,success)" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                                <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                <org.eventb.core.prIdent name="success" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p10">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=GoalComp(success,planrec,failure)" org.eventb.core.prHyps="p10">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=GoalComp(success,planrec,failure)" org.eventb.core.prHyps="p10">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="intention=ConcurrentComp(l,r)">
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·intention=ConcurrentComp(l,r)⇒((∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element∈GetFirsts(l)∧¬first_element∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element∈GetFirsts(l)∧first_element∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)))∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(¬pre∈GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms),failure⦂ℙ(belief_predicates×terms),planrec⦂Plan_body(belief_predicates,non_belief_predicates,terms),success⦂ℙ(belief_predicates×terms)·intention=GoalComp(success,planrec,failure)⇒((∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element=GoalComp(success,planrec,failure)∧new1=rhs)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)))∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(¬prev1=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="((∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element∈GetFirsts(l)∧¬first_element∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element∈GetFirsts(l)∧first_element∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)))∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(¬pre∈GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element=GoalComp(success,planrec,failure)∧new1=rhs)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs))">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="success" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="intention=ConcurrentComp(l,r)⇒((∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element∈GetFirsts(l)∧¬first_element∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element∈GetFirsts(l)∧first_element∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)))∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(¬pre∈GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="((∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element=GoalComp(success,planrec,failure)∧new1=rhs)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)))∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(¬prev1=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="success" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms)·⊤⇒(∀l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·intention=ConcurrentComp(l,r)⇒first_element∈dom({pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(pre∉GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne})∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(pre∉GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀failure⦂ℙ(belief_predicates×terms),planrec⦂Plan_body(belief_predicates,non_belief_predicates,terms),success⦂ℙ(belief_predicates×terms)·intention=GoalComp(success,planrec,failure)⇒first_element∈dom({prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(prev1≠GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1})∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(prev1≠GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(¬prev1=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="success" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms),l⦂Plan_body(belief_predicates,non_belief_predicates,terms),r⦂Plan_body(belief_predicates,non_belief_predicates,terms)·intention=ConcurrentComp(l,r)⇒((∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element∈GetFirsts(l)∧¬first_element∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element∈GetFirsts(l)∧first_element∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)))∧{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(¬pre∈GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="intention=GoalComp(success,planrec,failure)">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="success" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧¬pre∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(¬pre∈GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms),failure⦂ℙ(belief_predicates×terms),planrec⦂Plan_body(belief_predicates,non_belief_predicates,terms),success⦂ℙ(belief_predicates×terms)·intention=GoalComp(success,planrec,failure)⇒((∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element=GoalComp(success,planrec,failure)∧new1=rhs)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)))∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(¬prev1=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element∈GetFirsts(l)∧¬first_element∈GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(∃ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element∈GetFirsts(l)∧first_element∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs))">
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="intention=GoalComp(success,planrec,failure)⇒((∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·first_element=GoalComp(success,planrec,failure)∧new1=rhs)∨(∃new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬first_element=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)))∧{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(¬prev1=GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="failure" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="planrec" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="success" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="Failure_Recovery/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="cur,first_element,back,rhs,intention" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicP" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Seq">
                    <org.eventb.theory.core.scConstructorArgument name="leftSeq" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightSeq" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="leftConc" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="rightConc" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccesUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="EventUser" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureUser" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="Plan_body">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="NilComp"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicPComp">
                    <org.eventb.theory.core.scConstructorArgument name="getBasicPB" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="SeqComp">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="ConcurrentComp">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="GoalComp">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="getGoalPlanBody" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureComp" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Rhd">
                    <org.eventb.theory.core.scConstructorArgument name="current" org.eventb.core.type="Plan_body"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="Plan_body"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="EventComp">
                    <org.eventb.theory.core.scConstructorArgument name="getEvent" org.eventb.core.type="non_belief_predicates×terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="UserPlan" org.eventb.core.type="ℙ(ℙ(belief_predicates×terms)×UserP(belief_predicates,non_belief_predicates,terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isEventComp" org.eventb.core.label="isEventComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP2Plan_body" org.eventb.core.label="UserP2Plan_body" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="uP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="uP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Goal(success,evtxterms,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GoalComp(success,BasicPComp(evtxterms),fail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(nonbeliefpred))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="SeqComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="ConcurrentComp(UserP2Plan_body(ag1),UserP2Plan_body(ag2))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirsts" org.eventb.core.label="GetFirsts" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({BasicPComp(evt)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{EventComp(evt,planlib)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)) ◁ (id ⦂ ℙ(ℙ(Plan_body(belief_predicates,non_belief_predicates,terms))×ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)))))({False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetFirsts(l)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetFirsts(l)∪GetFirsts(r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{GoalComp(succes,planrec,failure)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="GetFirsts(cur)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update" org.eventb.core.label="update" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="prev" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(update(l,prev,new),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(update(l,pre,new),r))∨(pre∈GetFirsts(r)∧ne=ConcurrentComp(l,update(r,pre,new)))∨(pre∉GetFirsts(l)∧pre∉GetFirsts(r)∧ne=ConcurrentComp(l,r)) ∣ pre ↦ ne}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(succes,planrec,failure)∧new1=new)∨(prev1≠GoalComp(succes,planrec,failure)∧new1=GoalComp(succes,update(planrec,prev,new),failure)) ∣ prev1 ↦ new1}(prev)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Rhd(update(cur,prev,new),back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicComp" org.eventb.core.label="isBasicComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeqComp" org.eventb.core.label="isSeqComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrentComp" org.eventb.core.label="isConcurrentComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoalComp" org.eventb.core.label="isGoalComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRhd" org.eventb.core.label="isRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNilComp" org.eventb.core.label="isNilComp" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan_body" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan_body">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,userplan)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,userplan)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="GoalComp(success,plan,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GoalComp(success,NilRemove(plan),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(l1)∧plan=r1)∨(¬isNilComp(l1)∧plan=SeqComp(NilRemove(l1),r1)) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{plan⦂Plan_body(belief_predicates,non_belief_predicates,terms),l1⦂Plan_body(belief_predicates,non_belief_predicates,terms),r1⦂Plan_body(belief_predicates,non_belief_predicates,terms),l2⦂Plan_body(belief_predicates,non_belief_predicates,terms),r2⦂Plan_body(belief_predicates,non_belief_predicates,terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNilComp(l2)∧isNilComp(r2)∧plan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨((¬isNilComp(l2)∨¬isNilComp(r2))∧plan=ConcurrentComp(l2,r2))) ∣ l1 ↦ r1 ↦ plan}(l ↦ r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(plan,plans)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{finalplan⦂Plan_body(belief_predicates,non_belief_predicates,terms),plan1⦂Plan_body(belief_predicates,non_belief_predicates,terms),plans1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(isNilComp(plan1)∧finalplan=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)))∨(¬isNilComp(plan1)∧finalplan=Rhd(NilRemove(plan1),plans1)) ∣ plan1 ↦ plans1 ↦ finalplan}(plan ↦ plans)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="plan" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="plan">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Failure_Recovery" org.eventb.core.label="Failure_Recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(BasicPComp(evt))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="EventComp(evt,planlib)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="SeqComp(Failure_Recovery(l,first_element,rhs),r)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="ConcurrentComp(Failure_Recovery(l,first_element,rhs),Failure_Recovery(r,first_element,rhs))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="GoalComp(succes,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GoalComp(succes,Failure_Recovery(planrec,first_element,rhs),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}(cur ↦ back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetFirstRhd" org.eventb.core.label="GetFirstRhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="first_element" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="rhs" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicPComp(evt)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="EventComp(evt,planlib)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="rhs"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="SeqComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="GetFirstRhd(l,first_element,rhs)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="ConcurrentComp(l,r)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{pre⦂Plan_body(belief_predicates,non_belief_predicates,terms),ne⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(pre∈GetFirsts(l)∧pre∉GetFirsts(r)∧ne=GetFirstRhd(l,first_element,rhs))∨(pre∉GetFirsts(l)∧pre∈GetFirsts(r)∧ne=GetFirstRhd(r,first_element,rhs)) ∣ pre ↦ ne}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="GoalComp(success,planrec,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{prev1⦂Plan_body(belief_predicates,non_belief_predicates,terms),new1⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(prev1=GoalComp(success,planrec,failure)∧new1=rhs)∨(prev1≠GoalComp(success,planrec,failure)∧new1=GetFirstRhd(planrec,first_element,rhs)) ∣ prev1 ↦ new1}(first_element)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Rhd(cur,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetFirstRhd(cur,first_element,back)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5">
                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,first_element,rhs,back,cur)" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
                                        <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="back" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="cur" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
                                                        <org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Rhd(cur,back)" org.eventb.core.prHyps="p8">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11">
                                                        <org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Rhd(cur,back)" org.eventb.core.prHyps="p8">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="5.1.1.0.3.1.0"/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.5.1.0.1.1.0"/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms)·⊤⇒(intention=(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒(NilComp ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))∈dom(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))∧Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms)))∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀evt⦂non_belief_predicates×terms·intention=BasicPComp(evt)⇒BasicPComp(evt)∈dom(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))∧Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms)))∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(intention=(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))⇒(False ⦂ Plan_body(belief_predicates,non_belief_predicates,terms))∈dom(Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms))))∧Plan_body(belief_predicates,non_belief_predicates,terms) ◁ (id ⦂ ℙ(Plan_body(belief_predicates,non_belief_predicates,terms)×Plan_body(belief_predicates,non_belief_predicates,terms)))∈Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))∧(∀back⦂Plan_body(belief_predicates,non_belief_predicates,terms),cur⦂Plan_body(belief_predicates,non_belief_predicates,terms)·intention=Rhd(cur,back)⇒cur ↦ back∈dom({cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement})∧{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),evt⦂non_belief_predicates×terms·intention=BasicPComp(evt)⇒⊤"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="((∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·back=rhs∧first_element∈GetFirsts(cur)∧replacement=back)∨(∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(¬back=rhs∨¬first_element∈GetFirsts(cur))∧replacement=Rhd(Failure_Recovery(cur,first_element,rhs),back)))∧{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨((¬back1=rhs∨¬first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="back" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="cur" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms),back⦂Plan_body(belief_predicates,non_belief_predicates,terms),cur⦂Plan_body(belief_predicates,non_belief_predicates,terms)·intention=Rhd(cur,back)⇒((∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·back=rhs∧first_element∈GetFirsts(cur)∧replacement=back)∨(∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(¬back=rhs∨¬first_element∈GetFirsts(cur))∧replacement=Rhd(Failure_Recovery(cur,first_element,rhs),back)))∧{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="intention=Rhd(cur,back)⇒((∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·back=rhs∧first_element∈GetFirsts(cur)∧replacement=back)∨(∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(¬back=rhs∨¬first_element∈GetFirsts(cur))∧replacement=Rhd(Failure_Recovery(cur,first_element,rhs),back)))∧{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨((¬back1=rhs∨¬first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="back" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="cur" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="intention=Rhd(cur,back)">
            <org.eventb.core.prIdent name="back" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="cur" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),evt⦂non_belief_predicates×terms·intention=BasicPComp(evt)⇒evt∈non_belief_predicates × terms"/>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨((¬back1=rhs∨¬first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)">
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms),back⦂Plan_body(belief_predicates,non_belief_predicates,terms),cur⦂Plan_body(belief_predicates,non_belief_predicates,terms)·intention=Rhd(cur,back)⇒((∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·back=rhs∧first_element∈GetFirsts(cur)∧replacement=back)∨(∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(¬back=rhs∨¬first_element∈GetFirsts(cur))∧replacement=Rhd(Failure_Recovery(cur,first_element,rhs),back)))∧{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨((¬back1=rhs∨¬first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="(∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·back=rhs∧first_element∈GetFirsts(cur)∧replacement=back)∨(∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(¬back=rhs∨¬first_element∈GetFirsts(cur))∧replacement=Rhd(Failure_Recovery(cur,first_element,rhs),back))">
            <org.eventb.core.prIdent name="back" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="cur" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="first_element" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="rhs" org.eventb.core.type="Plan_body(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),evt⦂non_belief_predicates×terms·intention=BasicPComp(evt)⇒evt∈non_belief_predicates × terms)∧(∀intention⦂Plan_body(belief_predicates,non_belief_predicates,terms),first_element⦂Plan_body(belief_predicates,non_belief_predicates,terms),rhs⦂Plan_body(belief_predicates,non_belief_predicates,terms),back⦂Plan_body(belief_predicates,non_belief_predicates,terms),cur⦂Plan_body(belief_predicates,non_belief_predicates,terms)·intention=Rhd(cur,back)⇒((∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·back=rhs∧first_element∈GetFirsts(cur)∧replacement=back)∨(∃replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·¬(back=rhs∧first_element∈GetFirsts(cur))∧replacement=Rhd(Failure_Recovery(cur,first_element,rhs),back)))∧{cur1⦂Plan_body(belief_predicates,non_belief_predicates,terms),back1⦂Plan_body(belief_predicates,non_belief_predicates,terms),replacement⦂Plan_body(belief_predicates,non_belief_predicates,terms)·(back1=rhs∧first_element∈GetFirsts(cur1)∧replacement=back1)∨(¬(back1=rhs∧first_element∈GetFirsts(cur1))∧replacement=Rhd(Failure_Recovery(cur1,first_element,rhs),back1)) ∣ cur1 ↦ back1 ↦ replacement}∈Plan_body(belief_predicates,non_belief_predicates,terms) × Plan_body(belief_predicates,non_belief_predicates,terms) ⇸ Plan_body(belief_predicates,non_belief_predicates,terms))"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="Type_UserP_2_P/Op-WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Belief_predicate_symbols,Event_Action_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_Action_predicate_symbols" org.eventb.theory.core.givenType="Event_Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_user" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="P">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_Action_predicate_symbols" org.eventb.theory.core.givenType="Event_Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_intention" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_Action_predicate_symbols"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_intention(basic_program)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(suc,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Type_UserP_2_P" org.eventb.core.label="Type_UserP_2_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Declarative_goal_user(s,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="Declarative_goal_intention(s,BasicP_intention(evt),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_user(basic_program)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)×P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))))(BasicP_intention(basic_program))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(Type_UserP_2_P(head),Type_UserP_2_P(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(Type_UserP_2_P(left),Type_UserP_2_P(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps=""/>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀userP⦂UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)·⊤⇒(∀basic_program⦂Event_Action_predicate_symbols×Terms·userP=BasicP_user(basic_program)⇒BasicP_intention(basic_program)∈dom(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)×P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))))∧P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)×P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))∈P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ⇸ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀userP⦂UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms),basic_program⦂Event_Action_predicate_symbols×Terms·userP=BasicP_user(basic_program)⇒basic_program∈Event_Action_predicate_symbols × Terms"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀userP⦂UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms),basic_program⦂Event_Action_predicate_symbols×Terms·userP=BasicP_user(basic_program)⇒⊤"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="Next_programs/Op-WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Belief_predicate_symbols,Event_Action_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_Action_predicate_symbols" org.eventb.theory.core.givenType="Event_Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_user" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="P">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_Action_predicate_symbols" org.eventb.theory.core.givenType="Event_Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_intention" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_Action_predicate_symbols"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_intention(basic_program)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Type_UserP_2_P" org.eventb.core.label="Type_UserP_2_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Declarative_goal_user(s,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="Declarative_goal_intention(s,BasicP_intention(evt),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_user(basic_program)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)×P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))))(BasicP_intention(basic_program))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(Type_UserP_2_P(head),Type_UserP_2_P(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(Type_UserP_2_P(left),Type_UserP_2_P(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Next_programs" org.eventb.core.label="Next_programs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))({Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_intention(basic_program)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))({BasicP_intention(basic_program)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))({False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Next_programs(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Next_programs(left)∪Next_programs(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedual,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Next_programs(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps=""/>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀intention⦂P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)·⊤⇒(intention=(Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))⇒{Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)}∈dom(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))∧ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))))∈ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ⇸ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))∧(∀basic_program⦂Event_Action_predicate_symbols×Terms·intention=BasicP_intention(basic_program)⇒{BasicP_intention(basic_program)}∈dom(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))∧ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))))∈ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ⇸ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))∧(intention=(False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))⇒{False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)}∈dom(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))∧ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))))∈ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ⇸ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="(∀intention⦂P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)·intention=(Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))⇒⊤)∧(∀intention⦂P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms),basic_program⦂Event_Action_predicate_symbols×Terms·intention=BasicP_intention(basic_program)⇒⊤)∧(∀intention⦂P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)·intention=(False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))⇒⊤)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀intention⦂P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)·intention=(Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))⇒{Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)}∈ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))∧(∀intention⦂P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms),basic_program⦂Event_Action_predicate_symbols×Terms·intention=BasicP_intention(basic_program)⇒{BasicP_intention(basic_program)}∈ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))∧(∀intention⦂P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)·intention=(False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))⇒{False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)}∈ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="type_UserP_to_P/Op-WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Belief_predicate_symbols,Event_Action_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_Action_predicate_symbols" org.eventb.theory.core.givenType="Event_Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_user" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="P">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_Action_predicate_symbols" org.eventb.theory.core.givenType="Event_Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_intention" org.eventb.core.type="Event_Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="P"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="P"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_Action_predicate_symbols"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_intention(basic_program)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="type_UserP_to_P" org.eventb.core.label="type_UserP_to_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Declarative_goal_user(s,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="Declarative_goal_intention(s,BasicP_intention(evt),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_user(basic_program)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)×P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))))(BasicP_intention(basic_program))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(type_UserP_to_P(head),type_UserP_to_P(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(type_UserP_to_P(left),type_UserP_to_P(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="Next_programs" org.eventb.core.label="Next_programs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))({Nil ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_intention(basic_program)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))({BasicP_intention(basic_program)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))×ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))))({False ⦂ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Next_programs(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Next_programs(left)∪Next_programs(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedual,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Next_programs(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps=""/>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀userP⦂UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)·⊤⇒(∀basic_program⦂Event_Action_predicate_symbols×Terms·userP=BasicP_user(basic_program)⇒BasicP_intention(basic_program)∈dom(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)×P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))))∧P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)×P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms)))∈P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms) ⇸ P(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀userP⦂UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms),basic_program⦂Event_Action_predicate_symbols×Terms·userP=BasicP_user(basic_program)⇒basic_program∈Event_Action_predicate_symbols × Terms"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀userP⦂UserP(Belief_predicate_symbols,Event_Action_predicate_symbols,Terms),basic_program⦂Event_Action_predicate_symbols×Terms·userP=BasicP_user(basic_program)⇒⊤"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="next_programs_to_progress/Op-WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="2" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#2" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="1" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_user(s,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Declarative_goal_intention(s,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="next_programs_to_progress(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(left)∪next_programs_to_progress(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedual,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="next_programs_to_progress(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=BasicP_event_intention(basic_program_event)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=BasicP_action_intention(basic_program_action)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=Relevant_plans(event,guarded_plan_bodies)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(tail,head)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(tail,current_program,new_program),head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new=Concurrency_intention(update_intention(left,current_program,new_program),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedual,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedual,f)∧new=Declarative_goal_intention(s,update_intention(procedual,current_program,new_program),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedual),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=Sequence_intention(failure_recovery(head,current_program,backup_relevant_plans),tail) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new_search=Concurrency_intention(failure_recovery(left,current_program,backup_relevant_plans),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,backup_relevant_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(procedural)∧new_search=Declarative_goal_intention(s,failure_recovery(procedural,current_program,backup_relevant_plans),f) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr)∧new_intention_or_search=back)∨(¬(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,backup_relevant_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backups_for_current_program" org.eventb.core.label="get_backups_for_current_program" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}(current_program)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps=""/>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒{Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)}∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_event⦂Event_predicate_symbols×Terms·intention=BasicP_event_intention(basic_program_event)⇒{BasicP_event_intention(basic_program_event)}∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_action⦂Action_predicate_symbols×Terms·intention=BasicP_action_intention(basic_program_action)⇒{BasicP_action_intention(basic_program_action)}∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒{False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)}∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒⊤)∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_event⦂Event_predicate_symbols×Terms·intention=BasicP_event_intention(basic_program_event)⇒⊤)∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_action⦂Action_predicate_symbols×Terms·intention=BasicP_action_intention(basic_program_action)⇒⊤)∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒⊤)"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤⇒(intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒{Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)}∈dom(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))∧ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ⇸ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀basic_program_event⦂Event_predicate_symbols×Terms·intention=BasicP_event_intention(basic_program_event)⇒{BasicP_event_intention(basic_program_event)}∈dom(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))∧ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ⇸ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀basic_program_action⦂Action_predicate_symbols×Terms·intention=BasicP_action_intention(basic_program_action)⇒{BasicP_action_intention(basic_program_action)}∈dom(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))∧ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ⇸ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(intention=(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒{False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)}∈dom(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))∧ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ⇸ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="update_intention/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="new,tail,f,current_intention,new_program,procedural,right,current_program,head,current,s,left,current_belief_base,backups" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current_intention,current_program,new_program,current_belief_base)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                        <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                        <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                        <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees head,tail)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p7">
                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Sequence_intention(head,tail)" org.eventb.core.prHyps="p7">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p9"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p7"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees left,right)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
                                                <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p12">
                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
                                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current)" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
                                                                        <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p16">
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                                    <org.eventb.core.prAnte name="'">
                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p18"/>
                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p12"/>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19">
                                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current,new)" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
                                                                        <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                        <org.eventb.core.prIdent name="new" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                            <org.eventb.core.prAnte name="'">
                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p18"/>
                                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p12"/>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p21">
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p18"/>
                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p12"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p22">
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p18"/>
                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p12"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p23">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees f,procedural,s)" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
                                                <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p25">
                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
                                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current,new)" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
                                                                        <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                        <org.eventb.core.prIdent name="new" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prHyps="p25">
                                                                            <org.eventb.core.prAnte name="'">
                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p29"/>
                                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p25"/>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30">
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prHyps="p25">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p29"/>
                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p25"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p31">
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prHyps="p25">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p29"/>
                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p25"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p32">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees backups,current)" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
                                                <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p34">
                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Try_current_with_backups(current,backups)" org.eventb.core.prHyps="p34">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p36"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p34"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="current_intention=Concurrency_intention(left,right)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="new" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="current_program∈next_programs_to_progress(Try_current_with_backups(current,backups),current_belief_base)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="current_program∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left,current_belief_base)∧current_program∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="current_intention=Declarative_goal_intention(s,procedural,f)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left,current_belief_base)∧current_program∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left,current_belief_base)∧current_program∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base)))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="current_program∈next_programs_to_progress(head,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="current_intention=Try_current_with_backups(current,backups)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left,current_belief_base)∧current_program∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left,current_belief_base)∧current_program∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="current_program∈next_programs_to_progress(current,current_belief_base)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)⇒(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left,current_belief_base)∧current_program∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)⇒(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left,current_belief_base)∧current_program∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(¬current∈next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base))"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="current_program∈next_programs_to_progress(Sequence_intention(head,tail),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="current_intention=Declarative_goal_intention(s,procedural,f)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)))∧((∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(∃new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="current∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="current_program∈next_programs_to_progress(Concurrency_intention(left,right),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="current_program∈next_programs_to_progress(Declarative_goal_intention(s,procedural,f),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="current_intention=Sequence_intention(head,tail)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)⇒(current_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(current_intention=(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧((current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base))))∧current_program∈dom({current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new})∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)))∧current_program∈dom({current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new})∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base))"/>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(¬current=Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="new_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="get_backups_for_current_program/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="head,backup_relevant_plans,current,s,left,tail,f,procedural,current_program,right,intention,backups" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="2" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#2" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="1" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_user(s,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Declarative_goal_intention(s,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="next_programs_to_progress(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(left)∪next_programs_to_progress(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedual,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="next_programs_to_progress(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=BasicP_event_intention(basic_program_event)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=BasicP_action_intention(basic_program_action)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=Relevant_plans(event,guarded_plan_bodies)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(tail,head)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(tail,current_program,new_program),head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new=Concurrency_intention(update_intention(left,current_program,new_program),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedual,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedual,f)∧new=Declarative_goal_intention(s,update_intention(procedual,current_program,new_program),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedual),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=Sequence_intention(failure_recovery(head,current_program,backup_relevant_plans),tail) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new_search=Concurrency_intention(failure_recovery(left,current_program,backup_relevant_plans),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,backup_relevant_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(procedural)∧new_search=Declarative_goal_intention(s,failure_recovery(procedural,current_program,backup_relevant_plans),f) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr)∧new_intention_or_search=back)∨(¬(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,backup_relevant_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backups_for_current_program" org.eventb.core.label="get_backups_for_current_program" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}(current_program)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,current_program,backup_relevant_plans,head,tail)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Sequence_intention(head,tail)" org.eventb.core.prHyps="p4">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8">
                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9">
                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Sequence_intention(head,tail)" org.eventb.core.prHyps="p4">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,current_program,backup_relevant_plans,left,right)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p12">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15">
                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p16">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,current_program,backup_relevant_plans,f,procedural,s)" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p18">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prHyps="p18">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p18"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21">
                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prHyps="p18">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p18"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p22">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,current_program,backups,current)" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
                                <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p24">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Try_current_with_backups(current,backups)" org.eventb.core.prHyps="p24">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p24"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8">
                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p28">
                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Try_current_with_backups(current,backups)" org.eventb.core.prHyps="p24">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p24"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_relevant_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Concurrency_intention(left,right)⇒((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left)∧¬current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left)∧current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧¬current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(¬current∈next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="((∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧current_program∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(¬current=Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="intention=Concurrency_intention(left,right)">
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_relevant_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Sequence_intention(head,tail)⇒(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(¬current=Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="current_program∈next_programs_to_progress(head)">
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="current_program∈next_programs_to_progress(current)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_relevant_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·intention=Declarative_goal_intention(s,procedural,f)⇒((∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧current_program∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(¬current=Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_relevant_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Sequence_intention(head,tail)⇒(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_relevant_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Concurrency_intention(left,right)⇒((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left)∧¬current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left)∧current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧¬current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(¬current∈next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_relevant_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·intention=Declarative_goal_intention(s,procedural,f)⇒((∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧current_program∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(¬current=Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Try_current_with_backups(current,backups)⇒(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="(∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧current_program∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans))">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧¬current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(¬current∈next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_relevant_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤⇒(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Sequence_intention(head,tail)⇒current_program∈dom({current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search})∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Concurrency_intention(left,right)⇒current_program∈dom({current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search})∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈dom({current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return})∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Try_current_with_backups(current,backups)⇒current_program∈dom({curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search})∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="intention=Sequence_intention(head,tail)⇒(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="intention=Sequence_intention(head,tail)">
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left)∧¬current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left)∧current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧¬current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(¬current∈next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="intention=Concurrency_intention(left,right)⇒((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left)∧¬current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left)∧current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧¬current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(¬current∈next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left)∧¬current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program∈next_programs_to_progress(left)∧current_program∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans))">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="intention=Try_current_with_backups(current,backups)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="intention=Try_current_with_backups(current,backups)⇒(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="intention=Declarative_goal_intention(s,procedural,f)⇒((∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(∃new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬current_program=Declarative_goal_intention(s,procedural,f)∧current_program∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(¬current=Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup_relevant_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention=Try_current_with_backups(current,backups)⇒(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="intention=Declarative_goal_intention(s,procedural,f)">
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.onePointRule:2"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="failure_recovery/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="backup,new_search,tail,f,current_intention,back,procedural,right,current_program,new_intention_or_search,head,current,s,left,current_belief_base,current_backup_plans,curr" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current_intention,current_program,current_belief_base,current_backup_plans)" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
                                                                <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                                <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p8,p9">
                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
                                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees head,tail)" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
                                                                                        <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                        <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p13">
                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prHyps="p9">
                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Sequence_intention(head,tail)" org.eventb.core.prHyps="p13">
                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p16"/>
                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p13"/>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17">
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p9">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Sequence_intention(head,tail)" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="p13">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p16"/>
                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p13"/>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                </org.eventb.core.prRule>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20">
                                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees left,right)" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
                                                                                        <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                        <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p22">
                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
                                                                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current)" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
                                                                                                                <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p26">
                                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p9">
                                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
                                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p22">
                                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
                                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p29"/>
                                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p22"/>
                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                </org.eventb.core.prRule>
                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                        </org.eventb.core.prRule>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p31">
                                                                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current,new_search)" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
                                                                                                                <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                <org.eventb.core.prIdent name="new_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p9">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
                                                                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p22">
                                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p29"/>
                                                                                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p22"/>
                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                        </org.eventb.core.prRule>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p35">
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p9">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p22">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p37">
                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p29"/>
                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p22"/>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                    <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p38">
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="p9">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="p22">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p40">
                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p29"/>
                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p22"/>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                </org.eventb.core.prRule>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                            <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p41">
                                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees f,procedural,s)" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p42">
                                                                                        <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                                                        <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                        <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="">
                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="p43">
                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="">
                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p45">
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prHyps="p9">
                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prHyps="p43">
                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p46"/>
                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p43"/>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p47">
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="p9">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p48">
                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prGoal="p48" org.eventb.core.prHyps="p43">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p46"/>
                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p43"/>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                </org.eventb.core.prRule>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                            <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p50">
                                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees backup,current)" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="">
                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p51">
                                                                                        <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                        <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="">
                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="p52">
                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="">
                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p54">
                                                                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees curr,back,new_intention_or_search)" org.eventb.core.prGoal="p54" org.eventb.core.prHyps="">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p55">
                                                                                                                <org.eventb.core.prIdent name="curr" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                <org.eventb.core.prIdent name="back" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                <org.eventb.core.prIdent name="new_intention_or_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="p9">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p56">
                                                                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Try_current_with_backups(current,backup)" org.eventb.core.prGoal="p56" org.eventb.core.prHyps="p52">
                                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p58">
                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p57"/>
                                                                                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p52"/>
                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                        </org.eventb.core.prRule>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p59">
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p59" org.eventb.core.prHyps="p9">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p60">
                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Try_current_with_backups(current,backup)" org.eventb.core.prGoal="p60" org.eventb.core.prHyps="p52">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p61">
                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p57"/>
                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p52"/>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p62">
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil)" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p9">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p63">
                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Try_current_with_backups(current,backup)" org.eventb.core.prGoal="p63" org.eventb.core.prHyps="p52">
                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p64">
                                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p57"/>
                                                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
                                                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p52"/>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                </org.eventb.core.prRule>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="4.1.5.2.1.2.0.3.1.0"/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="4.1.5.2.1.1.1.1.0"/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="4.1.5.2.1.0.3.1.0"/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p45" org.eventb.core.predicate="current_program∈next_programs_to_progress(procedural,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p62" org.eventb.core.predicate="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p43" org.eventb.core.predicate="current_intention=Declarative_goal_intention(s,procedural,f)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p44" org.eventb.core.predicate="current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,get_backup_for_current_plan(Concurrency_intention(left,right),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,get_backup_for_current_plan(Concurrency_intention(left,right),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p40" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,get_backup_for_current_plan(Concurrency_intention(left,right),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,get_backup_for_current_plan(Concurrency_intention(left,right),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p50" org.eventb.core.predicate="∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="current_intention=Concurrency_intention(left,right)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="current_program∈next_programs_to_progress(head,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p39" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p47" org.eventb.core.predicate="current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p41" org.eventb.core.predicate="∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p52" org.eventb.core.predicate="current_intention=Try_current_with_backups(current,backup)">
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p57" org.eventb.core.predicate="current_program∈next_programs_to_progress(Try_current_with_backups(current,backup),current_belief_base)">
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p49" org.eventb.core.predicate="get_backup_for_current_plan(Declarative_goal_intention(s,procedural,f),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p55" org.eventb.core.predicate="(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))">
            <org.eventb.core.prIdent name="back" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="curr" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_intention_or_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(∀basic_program_event⦂Event_predicate_symbols×Terms·current_intention=BasicP_event_intention(basic_program_event)⇒basic_program_event∈Event_predicate_symbols × Terms)∧(∀basic_program_action⦂Action_predicate_symbols×Terms·current_intention=BasicP_action_intention(basic_program_action)⇒basic_program_action∈Action_predicate_symbols × Terms)∧(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬(backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p54" org.eventb.core.predicate="∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(∀basic_program_event⦂Event_predicate_symbols×Terms·current_intention=BasicP_event_intention(basic_program_event)⇒BasicP_event_intention(basic_program_event)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀basic_program_action⦂Action_predicate_symbols×Terms·current_intention=BasicP_action_intention(basic_program_action)⇒BasicP_action_intention(basic_program_action)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(current_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(current_intention=(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧((current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))∧current_program∈dom({current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search})∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧current ↦ backup∈dom({curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search})∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,get_backup_for_current_plan(Concurrency_intention(left,right),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧get_backup_for_current_plan(Concurrency_intention(left,right),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p42" org.eventb.core.predicate="current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p59" org.eventb.core.predicate="(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup))">
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p60" org.eventb.core.predicate="(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),backup))">
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="get_backup_for_current_plan(Sequence_intention(head,tail),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="current∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="current_program∈next_programs_to_progress(Sequence_intention(head,tail),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p56" org.eventb.core.predicate="(back=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))">
            <org.eventb.core.prIdent name="back" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="curr" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_intention_or_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(∀basic_program_event⦂Event_predicate_symbols×Terms·current_intention=BasicP_event_intention(basic_program_event)⇒⊤)∧(∀basic_program_action⦂Action_predicate_symbols×Terms·current_intention=BasicP_action_intention(basic_program_action)⇒⊤)∧(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="get_backup_for_current_plan(Concurrency_intention(left,right),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="current_program∈next_programs_to_progress(Concurrency_intention(left,right),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans)))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p63" org.eventb.core.predicate="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p46" org.eventb.core.predicate="current_program∈next_programs_to_progress(Declarative_goal_intention(s,procedural,f),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p61" org.eventb.core.predicate="(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),backup))">
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(∀basic_program_event⦂Event_predicate_symbols×Terms·current_intention=BasicP_event_intention(basic_program_event)⇒basic_program_event∈Event_predicate_symbols × Terms)∧(∀basic_program_action⦂Action_predicate_symbols×Terms·current_intention=BasicP_action_intention(basic_program_action)⇒basic_program_action∈Action_predicate_symbols × Terms)∧(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p53" org.eventb.core.predicate="(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p48" org.eventb.core.predicate="get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(∀basic_program_event⦂Event_predicate_symbols×Terms·current_intention=BasicP_event_intention(basic_program_event)⇒basic_program_event∈Event_predicate_symbols × Terms)∧(∀basic_program_action⦂Action_predicate_symbols×Terms·current_intention=BasicP_action_intention(basic_program_action)⇒basic_program_action∈Action_predicate_symbols × Terms)∧(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬(backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p58" org.eventb.core.predicate="(back=get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))">
            <org.eventb.core.prIdent name="back" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="curr" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_intention_or_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="new_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))⇒(∀basic_program_event⦂Event_predicate_symbols×Terms·current_intention=BasicP_event_intention(basic_program_event)⇒basic_program_event∈Event_predicate_symbols × Terms)∧(∀basic_program_action⦂Action_predicate_symbols×Terms·current_intention=BasicP_action_intention(basic_program_action)⇒basic_program_action∈Action_predicate_symbols × Terms)∧(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(head,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_backup_plans=get_backup_for_current_plan(left,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current∈next_programs_to_progress(right,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(right,current,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current_program,current_belief_base,current_backup_plans),right))∨(∃new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,current_belief_base,current_backup_plans))))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(procedural,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∧(∀backup⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="current_intention=Sequence_intention(head,tail)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p51" org.eventb.core.predicate="current_intention=Try_current_with_backups(current,backup)⇒(∀curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base)⇒current_program∈next_programs_to_progress(curr,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(curr,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧((∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·backup=current_backup_plans∧current_program∈next_programs_to_progress(current,current_belief_base)∧new_intention_or_search=backup)∨(∃new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(¬backup=current_backup_plans∨¬current_program∈next_programs_to_progress(current,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,current_belief_base,current_backup_plans),backup)))∧{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=current_backup_plans∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p64" org.eventb.core.predicate="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨((¬back=get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∨¬current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,get_backup_for_current_plan(Try_current_with_backups(current,backup),current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))),back)) ∣ curr ↦ back ↦ new_intention_or_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) × IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="backup" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="UserP_to_IntentionP/Op-WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="2" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#2" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="1" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedual),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps=""/>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="(∀userP⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_event⦂Event_predicate_symbols×Terms·userP=BasicP_event_user(basic_program_event)⇒⊤)∧(∀userP⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_action⦂Action_predicate_symbols×Terms·userP=BasicP_action_user(basic_program_action)⇒⊤)∧(∀userP⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),evt⦂Event_predicate_symbols×Terms,failure⦂ℙ(Belief_predicate_symbols×Terms),success⦂ℙ(Belief_predicate_symbols×Terms)·userP=Declarative_goal_user(success,evt,failure)⇒⊤)"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀userP⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_event⦂Event_predicate_symbols×Terms·userP=BasicP_event_user(basic_program_event)⇒basic_program_event∈Event_predicate_symbols × Terms)∧(∀userP⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),basic_program_action⦂Action_predicate_symbols×Terms·userP=BasicP_action_user(basic_program_action)⇒basic_program_action∈Action_predicate_symbols × Terms)∧(∀userP⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),evt⦂Event_predicate_symbols×Terms,failure⦂ℙ(Belief_predicate_symbols×Terms),success⦂ℙ(Belief_predicate_symbols×Terms)·userP=Declarative_goal_user(success,evt,failure)⇒evt∈Event_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀userP⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤⇒(∀basic_program_event⦂Event_predicate_symbols×Terms·userP=BasicP_event_user(basic_program_event)⇒BasicP_event_intention(basic_program_event)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀basic_program_action⦂Action_predicate_symbols×Terms·userP=BasicP_action_user(basic_program_action)⇒BasicP_action_intention(basic_program_action)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀evt⦂Event_predicate_symbols×Terms,failure⦂ℙ(Belief_predicate_symbols×Terms),success⦂ℙ(Belief_predicate_symbols×Terms)·userP=Declarative_goal_user(success,evt,failure)⇒BasicP_event_intention(evt)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD_UserP_to_IntentionP/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·user_p∈UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)⇒UserP_to_IntentionP(user_p)∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="⊤⇒⊤"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD1_UserP_to_IntentionP/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="user_p,event" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees event,user_p)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                                <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with user_p=BasicP_event_user(event)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="UserP_to_IntentionP(user_p)=BasicP_event_intention(event)">
            <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="user_p=BasicP_event_user(event)">
            <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀event⦂Event_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·user_p=BasicP_event_user(event)⇒UserP_to_IntentionP(user_p)=BasicP_event_intention(event)"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀event⦂Event_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧user_p=BasicP_event_user(event)⇒⊤∧UserP_to_IntentionP(user_p)=BasicP_event_intention(event)"/>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="UserP_to_IntentionP(BasicP_event_user(event))=BasicP_event_intention(event)">
            <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀event⦂Event_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols × Terms∧user_p=BasicP_event_user(event)⇒UserP_to_IntentionP(user_p)∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧UserP_to_IntentionP(user_p)=BasicP_event_intention(event)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="user_p=BasicP_event_user(event)⇒UserP_to_IntentionP(user_p)=BasicP_event_intention(event)">
            <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD2_UserP_to_IntentionP/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="user_p,action" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees action,user_p)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="action" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                                <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with user_p=BasicP_action_user(action)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="UserP_to_IntentionP(user_p)=BasicP_action_intention(action)">
            <org.eventb.core.prIdent name="action" org.eventb.core.type="Action_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="UserP_to_IntentionP(BasicP_action_user(action))=BasicP_action_intention(action)">
            <org.eventb.core.prIdent name="action" org.eventb.core.type="Action_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀action⦂Action_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧user_p=BasicP_action_user(action)⇒⊤∧UserP_to_IntentionP(user_p)=BasicP_action_intention(action)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="user_p=BasicP_action_user(action)⇒UserP_to_IntentionP(user_p)=BasicP_action_intention(action)">
            <org.eventb.core.prIdent name="action" org.eventb.core.type="Action_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="user_p=BasicP_action_user(action)">
            <org.eventb.core.prIdent name="action" org.eventb.core.type="Action_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀action⦂Action_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·user_p=BasicP_action_user(action)⇒UserP_to_IntentionP(user_p)=BasicP_action_intention(action)"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀action⦂Action_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·action∈Action_predicate_symbols × Terms∧user_p=BasicP_action_user(action)⇒UserP_to_IntentionP(user_p)∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧UserP_to_IntentionP(user_p)=BasicP_action_intention(action)"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD3_UserP_to_IntentionP/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="t,user_p,h" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees h,t,user_p)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="h" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="t" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with user_p=Sequence_user(h,t)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="UserP_to_IntentionP(Sequence_user(h,t))=Sequence_intention(UserP_to_IntentionP(h),UserP_to_IntentionP(t))">
            <org.eventb.core.prIdent name="h" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="user_p=Sequence_user(h,t)⇒UserP_to_IntentionP(user_p)=Sequence_intention(UserP_to_IntentionP(h),UserP_to_IntentionP(t))">
            <org.eventb.core.prIdent name="h" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀h⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧⊤∧user_p=Sequence_user(h,t)⇒UserP_to_IntentionP(user_p)=Sequence_intention(UserP_to_IntentionP(h),UserP_to_IntentionP(t))"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="UserP_to_IntentionP(user_p)=Sequence_intention(UserP_to_IntentionP(h),UserP_to_IntentionP(t))">
            <org.eventb.core.prIdent name="h" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀h⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·user_p=Sequence_user(h,t)⇒UserP_to_IntentionP(user_p)=Sequence_intention(UserP_to_IntentionP(h),UserP_to_IntentionP(t))"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀h⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·h∈UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧t∈UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧user_p=Sequence_user(h,t)⇒UserP_to_IntentionP(user_p)=Sequence_intention(UserP_to_IntentionP(h),UserP_to_IntentionP(t))"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="user_p=Sequence_user(h,t)">
            <org.eventb.core.prIdent name="h" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD4_UserP_to_IntentionP/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="r,user_p,l" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees l,r,user_p)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="l" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="r" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with user_p=Concurrency_user(l,r)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="user_p=Concurrency_user(l,r)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀l⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l∈UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧r∈UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧user_p=Concurrency_user(l,r)⇒UserP_to_IntentionP(user_p)=Concurrency_intention(UserP_to_IntentionP(l),UserP_to_IntentionP(r))"/>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="UserP_to_IntentionP(Concurrency_user(l,r))=Concurrency_intention(UserP_to_IntentionP(l),UserP_to_IntentionP(r))">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀l⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·user_p=Concurrency_user(l,r)⇒UserP_to_IntentionP(user_p)=Concurrency_intention(UserP_to_IntentionP(l),UserP_to_IntentionP(r))"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="user_p=Concurrency_user(l,r)⇒UserP_to_IntentionP(user_p)=Concurrency_intention(UserP_to_IntentionP(l),UserP_to_IntentionP(r))">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="UserP_to_IntentionP(user_p)=Concurrency_intention(UserP_to_IntentionP(l),UserP_to_IntentionP(r))">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀l⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧⊤∧user_p=Concurrency_user(l,r)⇒UserP_to_IntentionP(user_p)=Concurrency_intention(UserP_to_IntentionP(l),UserP_to_IntentionP(r))"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD5_UserP_to_IntentionP/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="s,f,user_p,event" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees s,f,event,user_p)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                                        <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                        <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                        <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                                        <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p5">
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with user_p=Declarative_goal_user(s,event,f)" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p5">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p5"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),event⦂Event_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·s∈ℙ(Belief_predicate_symbols × Terms)∧f∈ℙ(Belief_predicate_symbols × Terms)∧event∈Event_predicate_symbols × Terms∧user_p=Declarative_goal_user(s,event,f)⇒UserP_to_IntentionP(user_p)=Declarative_goal_intention(s,BasicP_event_intention(event),f)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),event⦂Event_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·user_p=Declarative_goal_user(s,event,f)⇒UserP_to_IntentionP(user_p)=Declarative_goal_intention(s,BasicP_event_intention(event),f)"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),event⦂Event_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧⊤∧⊤∧user_p=Declarative_goal_user(s,event,f)⇒UserP_to_IntentionP(user_p)=Declarative_goal_intention(s,BasicP_event_intention(event),f)"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),event⦂Event_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·s∈ℙ(Belief_predicate_symbols × Terms)∧f∈ℙ(Belief_predicate_symbols × Terms)∧event∈Event_predicate_symbols × Terms∧user_p=Declarative_goal_user(s,event,f)⇒UserP_to_IntentionP(user_p)=Declarative_goal_intention(s,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(event)),f)"/>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="UserP_to_IntentionP(user_p)=Declarative_goal_intention(s,BasicP_event_intention(event),f)">
            <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="user_p=Declarative_goal_user(s,event,f)⇒UserP_to_IntentionP(user_p)=Declarative_goal_intention(s,BasicP_event_intention(event),f)">
            <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="UserP_to_IntentionP(Declarative_goal_user(s,event,f))=Declarative_goal_intention(s,BasicP_event_intention(event),f)">
            <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="user_p=Declarative_goal_user(s,event,f)">
            <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="user_p" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD5_UserP_to_IntentionP/WD-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps=""/>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),event⦂Event_predicate_symbols×Terms,user_p⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·s∈ℙ(Belief_predicate_symbols × Terms)∧f∈ℙ(Belief_predicate_symbols × Terms)∧event∈Event_predicate_symbols × Terms∧user_p=Declarative_goal_user(s,event,f)⇒BasicP_event_intention(event)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD1_next_programs_to_progress/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="t,h,intention_p" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="2" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#2" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="1" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="next_programs_to_progress(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(left)∪next_programs_to_progress(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedural,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="next_programs_to_progress(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(intention)∨(∃s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·s∈ℙ(Belief_predicate_symbols × Terms)∧f∈ℙ(Belief_predicate_symbols × Terms)∧procedural∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧Declarative_goal_intention(s,procedural,f)∈next_programs_to_progress(intention)⇒current_program∈next_programs_to_progress(procedural))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=Relevant_plans(event,guarded_plan_bodies)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(tail,head)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(tail,current_program,new_program),head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧new=Concurrency_intention(update_intention(left,current_program,new_program),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedual),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=Sequence_intention(failure_recovery(head,current_program,backup_relevant_plans),tail) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new_search=Concurrency_intention(failure_recovery(left,current_program,backup_relevant_plans),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,backup_relevant_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(procedural)∧new_search=Declarative_goal_intention(s,failure_recovery(procedural,current_program,backup_relevant_plans),f) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr)∧new_intention_or_search=back)∨(¬(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,backup_relevant_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backups_for_current_program" org.eventb.core.label="get_backups_for_current_program" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}(current_program)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees h,t,intention_p)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="h" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="t" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention_p=Sequence_intention(h,t)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·h∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧t∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧intention_p=Sequence_intention(h,t)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(h)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="intention_p=Sequence_intention(h,t)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(h)">
            <org.eventb.core.prIdent name="h" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="next_programs_to_progress(Sequence_intention(h,t))=next_programs_to_progress(h)">
            <org.eventb.core.prIdent name="h" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention_p=Sequence_intention(h,t)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(h)"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="next_programs_to_progress(intention_p)=next_programs_to_progress(h)">
            <org.eventb.core.prIdent name="h" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧⊤∧intention_p=Sequence_intention(h,t)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(h)"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="intention_p=Sequence_intention(h,t)">
            <org.eventb.core.prIdent name="h" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD2_next_programs_to_progress/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="r,l,intention_p" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="2" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#2" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="1" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="next_programs_to_progress(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(left)∪next_programs_to_progress(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedural,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="next_programs_to_progress(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(intention)∨(∃s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·s∈ℙ(Belief_predicate_symbols × Terms)∧f∈ℙ(Belief_predicate_symbols × Terms)∧procedural∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧Declarative_goal_intention(s,procedural,f)∈next_programs_to_progress(intention)⇒current_program∈next_programs_to_progress(procedural))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=Relevant_plans(event,guarded_plan_bodies)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(tail,head)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(tail,current_program,new_program),head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧new=Concurrency_intention(update_intention(left,current_program,new_program),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedual),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=Sequence_intention(failure_recovery(head,current_program,backup_relevant_plans),tail) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new_search=Concurrency_intention(failure_recovery(left,current_program,backup_relevant_plans),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,backup_relevant_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(procedural)∧new_search=Declarative_goal_intention(s,failure_recovery(procedural,current_program,backup_relevant_plans),f) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr)∧new_intention_or_search=back)∨(¬(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,backup_relevant_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backups_for_current_program" org.eventb.core.label="get_backups_for_current_program" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}(current_program)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees l,r,intention_p)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention_p=Concurrency_intention(l,r)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention_p=Concurrency_intention(l,r)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="intention_p=Concurrency_intention(l,r)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)">
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧r∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧intention_p=Concurrency_intention(l,r)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="intention_p=Concurrency_intention(l,r)">
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="next_programs_to_progress(Concurrency_intention(l,r))=next_programs_to_progress(l)∪next_programs_to_progress(r)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧⊤∧intention_p=Concurrency_intention(l,r)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)">
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD3_next_programs_to_progress/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="current,intention_p,backups" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="2" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#2" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="1" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="next_programs_to_progress(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(left)∪next_programs_to_progress(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedural,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="next_programs_to_progress(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(intention)∨(∃s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·s∈ℙ(Belief_predicate_symbols × Terms)∧f∈ℙ(Belief_predicate_symbols × Terms)∧procedural∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧Declarative_goal_intention(s,procedural,f)∈next_programs_to_progress(intention)⇒current_program∈next_programs_to_progress(procedural))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=Relevant_plans(event,guarded_plan_bodies)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(tail,head)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(tail,current_program,new_program),head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧new=Concurrency_intention(update_intention(left,current_program,new_program),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedual),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=Sequence_intention(failure_recovery(head,current_program,backup_relevant_plans),tail) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new_search=Concurrency_intention(failure_recovery(left,current_program,backup_relevant_plans),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,backup_relevant_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(procedural)∧new_search=Declarative_goal_intention(s,failure_recovery(procedural,current_program,backup_relevant_plans),f) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr)∧new_intention_or_search=back)∨(¬(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,backup_relevant_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backups_for_current_program" org.eventb.core.label="get_backups_for_current_program" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}(current_program)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current,backups,intention_p)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention_p=Try_current_with_backups(current,backups)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧backups∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧intention_p=Try_current_with_backups(current,backups)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(current)"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="next_programs_to_progress(intention_p)=next_programs_to_progress(current)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="next_programs_to_progress(Try_current_with_backups(current,backups))=next_programs_to_progress(current)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention_p=Try_current_with_backups(current,backups)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(current)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="intention_p=Try_current_with_backups(current,backups)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(current)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧⊤∧intention_p=Try_current_with_backups(current,backups)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(current)"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="intention_p=Try_current_with_backups(current,backups)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD4_next_programs_to_progress/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="r,current,t,h,l,intention_p,backups" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="2" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#2" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="1" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="next_programs_to_progress(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(left)∪next_programs_to_progress(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedural,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="next_programs_to_progress(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(intention)∨(∃s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·s∈ℙ(Belief_predicate_symbols × Terms)∧f∈ℙ(Belief_predicate_symbols × Terms)∧procedural∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧Declarative_goal_intention(s,procedural,f)∈next_programs_to_progress(intention)⇒current_program∈next_programs_to_progress(procedural))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=Relevant_plans(event,guarded_plan_bodies)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(tail,head)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(tail,current_program,new_program),head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧new=Concurrency_intention(update_intention(left,current_program,new_program),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedual),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=Sequence_intention(failure_recovery(head,current_program,backup_relevant_plans),tail) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new_search=Concurrency_intention(failure_recovery(left,current_program,backup_relevant_plans),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,backup_relevant_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(procedural)∧new_search=Declarative_goal_intention(s,failure_recovery(procedural,current_program,backup_relevant_plans),f) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr)∧new_intention_or_search=back)∨(¬(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,backup_relevant_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backups_for_current_program" org.eventb.core.label="get_backups_for_current_program" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}(current_program)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees h,t,l,r,current,backups,intention_p)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                                        <org.eventb.core.prIdent name="h" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                        <org.eventb.core.prIdent name="t" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                        <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                        <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                        <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                        <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                        <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p5"/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(⊤∧⊤∧¬intention_p=Sequence_intention(h,t))∨(⊤∧⊤∧¬intention_p=Concurrency_intention(l,r))∨(⊤∧⊤∧¬intention_p=Try_current_with_backups(current,backups))⇒next_programs_to_progress(intention_p)={intention_p}"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(h∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧t∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧¬intention_p=Sequence_intention(h,t))∨(l∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧r∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧¬intention_p=Concurrency_intention(l,r))∨(current∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧backups∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧¬intention_p=Try_current_with_backups(current,backups))⇒next_programs_to_progress(intention_p)={intention_p}"/>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="next_programs_to_progress(intention_p)={intention_p}">
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="¬intention_p=Sequence_intention(h,t)∨¬intention_p=Concurrency_intention(l,r)∨¬intention_p=Try_current_with_backups(current,backups)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="h" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬intention_p=Sequence_intention(h,t)∨¬intention_p=Concurrency_intention(l,r)∨¬intention_p=Try_current_with_backups(current,backups)⇒next_programs_to_progress(intention_p)={intention_p}">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="h" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="t" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·¬intention_p=Sequence_intention(h,t)∨¬intention_p=Concurrency_intention(l,r)∨¬intention_p=Try_current_with_backups(current,backups)⇒next_programs_to_progress(intention_p)={intention_p}"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(h∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧t∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧intention_p≠Sequence_intention(h,t))∨(l∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧r∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧intention_p≠Concurrency_intention(l,r))∨(current∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧backups∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧intention_p≠Try_current_with_backups(current,backups))⇒next_programs_to_progress(intention_p)={intention_p}"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="WD1_update_intention/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="r,l,intention_p" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRevelant_plans" org.eventb.core.label="isRevelant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="2" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#2" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="1" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="next_programs_to_progress(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(left)∪next_programs_to_progress(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{Declarative_goal_intention(s,procedural,f)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element=|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="next_programs_to_progress(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(intention)∨(∃s⦂ℙ(Belief_predicate_symbols×Terms),f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·s∈ℙ(Belief_predicate_symbols × Terms)∧f∈ℙ(Belief_predicate_symbols × Terms)∧procedural∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧Declarative_goal_intention(s,procedural,f)∈next_programs_to_progress(intention)⇒current_program∈next_programs_to_progress(procedural))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current=Relevant_plans(event,guarded_plan_bodies)∧new=new_program ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(tail,head)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(tail,current_program,new_program),head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧new=Concurrency_intention(update_intention(left,current_program,new_program),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element&gt;|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedual),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementF|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=Sequence_intention(failure_recovery(head,current_program,backup_relevant_plans),tail) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧new_search=Concurrency_intention(failure_recovery(left,current_program,backup_relevant_plans),right))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧new_search=Concurrency_intention(left,failure_recovery(right,current_program,backup_relevant_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(procedural)∧new_search=Declarative_goal_intention(s,failure_recovery(procedural,current_program,backup_relevant_plans),f) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr)∧new_intention_or_search=back)∨(¬(back=backup_relevant_plans∧current_program∈next_programs_to_progress(curr))∧new_intention_or_search=Try_current_with_backups(failure_recovery(current,current_program,backup_relevant_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backups_for_current_program" org.eventb.core.label="get_backups_for_current_program" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="backup_relevant_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="backup_relevant_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(head)∧new_search=get_backups_for_current_program(head,current_program,backup_relevant_plans) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left)∧current∉next_programs_to_progress(right)∧next_search=get_backups_for_current_program(left,current_program,backup_relevant_plans))∨(current∉next_programs_to_progress(left)∧current∈next_programs_to_progress(right)∧next_search=get_backups_for_current_program(right,current_program,backup_relevant_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search_or_return⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new_search_or_return=backup_relevant_plans)∨(current≠Declarative_goal_intention(s,procedural,f)∧current∈next_programs_to_progress(procedural)∧new_search_or_return=get_backups_for_current_program(procedural,current_program,backup_relevant_plans)) ∣ current ↦ new_search_or_return}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·curr∈next_programs_to_progress(current)∧new_search=get_backups_for_current_program(current,current_program,backups) ∣ curr ↦ new_search}(current_program)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees l,r,intention_p)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
                                <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention_p=Concurrency_intention(l,r)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·intention_p=Concurrency_intention(l,r)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="intention_p=Concurrency_intention(l,r)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)">
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧r∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)∧intention_p=Concurrency_intention(l,r)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="intention_p=Concurrency_intention(l,r)">
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="next_programs_to_progress(Concurrency_intention(l,r))=next_programs_to_progress(l)∪next_programs_to_progress(r)">
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀l⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),intention_p⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧⊤∧intention_p=Concurrency_intention(l,r)⇒next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="next_programs_to_progress(intention_p)=next_programs_to_progress(l)∪next_programs_to_progress(r)">
            <org.eventb.core.prIdent name="intention_p" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="l" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="r" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="get_backup_for_current_plan/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="tail,f,current_intention,procedural,right,current_program,head,next_search,current,s,left,current_belief_base,current_backup_plans,backups" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current_intention,current_program,current_belief_base,current_backup_plans)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                        <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                        <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                        <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees head,tail)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p7">
                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Sequence_intention(head,tail)" org.eventb.core.prHyps="p7">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p9"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p7"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees left,right)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
                                                <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p12">
                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
                                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current)" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
                                                                        <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p16">
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                                    <org.eventb.core.prAnte name="'">
                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p18"/>
                                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p12"/>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19">
                                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees current,next_search)" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
                                                                        <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                        <org.eventb.core.prIdent name="next_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                            <org.eventb.core.prAnte name="'">
                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p18"/>
                                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p12"/>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p21">
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p18"/>
                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p12"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                            <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p22">
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Concurrency_intention(left,right)" org.eventb.core.prHyps="p12">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p18"/>
                                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p12"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p23">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees f,procedural,s)" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
                                                <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p25">
                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prHyps="p25">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p27"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p25"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p28">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees backups,current)" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
                                                <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="p30">
                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with current_intention=Try_current_with_backups(current,backups)" org.eventb.core.prHyps="p30">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p32"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p30"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="current_program∈next_programs_to_progress(procedural,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="current_program∈next_programs_to_progress(Try_current_with_backups(current,backups),current_belief_base)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)⇒(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧((current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base))))∧current_program∈dom({current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search})∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base))"/>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="current_intention=Try_current_with_backups(current,backups)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀current_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_program⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current_belief_base⦂ℙ(Belief_predicate_symbols×Terms),current_backup_plans⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(current_intention,current_belief_base)⇒(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base))"/>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base))">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="next_search" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)⇒(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="current_intention=Sequence_intention(head,tail)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="current_program∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="current_program∈next_programs_to_progress(Sequence_intention(head,tail),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="current_program∈next_programs_to_progress(head,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="current_program∈next_programs_to_progress(current,current_belief_base)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="(∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base))∧(∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∧(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base))∧(∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀backups⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="current_intention=Try_current_with_backups(current,backups)⇒current_program∈next_programs_to_progress(current,current_belief_base)">
            <org.eventb.core.prIdent name="backups" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="current_intention=Declarative_goal_intention(s,procedural,f)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="current∈next_programs_to_progress(left,current_belief_base)">
            <org.eventb.core.prIdent name="current" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀left⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),right⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Concurrency_intention(left,right)⇒(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current∈next_programs_to_progress(left,current_belief_base)⇒current_program∈next_programs_to_progress(left,current_belief_base))∧(∀current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)⇒current_program∈next_programs_to_progress(right,current_belief_base)))∧((∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)))∧{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="head" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="tail" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·current_intention=Declarative_goal_intention(s,procedural,f)⇒current_program∈next_programs_to_progress(procedural,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(∃next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_program∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans))">
            <org.eventb.core.prIdent name="current_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="current_intention=Concurrency_intention(left,right)">
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="current_program∈next_programs_to_progress(Declarative_goal_intention(s,procedural,f),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀head⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),tail⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·current_intention=Sequence_intention(head,tail)⇒current_program∈next_programs_to_progress(head,current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="current_program∈next_programs_to_progress(Concurrency_intention(left,right),current_belief_base)">
            <org.eventb.core.prIdent name="current_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="current_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="left" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="right" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="NilRemoval_test/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p2"/>
                <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p3"/>
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="NilRemove(Concurrency_intention(Concurrency_intention(Concurrency_intention(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="NilRemove(Concurrency_intention(Concurrency_intention(Concurrency_intention(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="NilRemove(Concurrency_intention(Concurrency_intention(Concurrency_intention(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(NilRemove(Concurrency_intention(Concurrency_intention(Concurrency_intention(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="NilRemoval_test/WD-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="NilRemove(Concurrency_intention(Concurrency_intention(Concurrency_intention(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="NilRemove(Concurrency_intention(Concurrency_intention(Concurrency_intention(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)),Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="backup_plans_WD/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="s,f,procedural,intention" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∨f⊈belief_base∨¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees intention,f,procedural,s)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                        <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                        <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                        <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=Declarative_goal_intention(s,procedural,f)" org.eventb.core.prHyps="p3">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p3"/>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤⇒(∀f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·intention=Declarative_goal_intention(s,procedural,f)⇒isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)⇒(∃current_plan0⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_plans1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·procedural=Try_current_with_backups(current_plan0,backup_plans1))∧(isBasicP_event_intention(backup_plans(procedural))⇒(∃current_plan0⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_plans1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·procedural=Try_current_with_backups(current_plan0,backup_plans1)))))"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="intention=Declarative_goal_intention(s,procedural,f)⇒isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)⇒(∃current_plan0⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_plans1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·procedural=Try_current_with_backups(current_plan0,backup_plans1))∧(isBasicP_event_intention(backup_plans(procedural))⇒(∃current_plan0⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_plans1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·procedural=Try_current_with_backups(current_plan0,backup_plans1))))">
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="intention=Declarative_goal_intention(s,procedural,f)">
            <org.eventb.core.prIdent name="f" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="s" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)⇒(∃current_plan0⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_plans1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·procedural=Try_current_with_backups(current_plan0,backup_plans1))∧(isBasicP_event_intention(backup_plans(procedural))⇒(∃current_plan0⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_plans1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·procedural=Try_current_with_backups(current_plan0,backup_plans1))))">
            <org.eventb.core.prIdent name="procedural" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),f⦂ℙ(Belief_predicate_symbols×Terms),procedural⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),s⦂ℙ(Belief_predicate_symbols×Terms)·intention=Declarative_goal_intention(s,procedural,f)⇒isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)⇒(∃current_plan0⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_plans1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·procedural=Try_current_with_backups(current_plan0,backup_plans1))∧(isBasicP_event_intention(backup_plans(procedural))⇒(∃current_plan0⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),backup_plans1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·procedural=Try_current_with_backups(current_plan0,backup_plans1))))"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
</org.eventb.core.prFile>

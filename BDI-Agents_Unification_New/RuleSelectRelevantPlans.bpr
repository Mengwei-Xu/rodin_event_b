<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.prFile version="1">
    <org.eventb.core.prProof name="INITIALISATION/inv5/INV" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p2,p3"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2,p3"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p4" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18,p19"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p18,p19"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p26"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p29"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p31"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p32" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p33,p34"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p35"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p36"/>
                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p37"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p38" org.eventb.core.prHyps=""/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="0=0⇒BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="partition(Point,{a},{b},{c})">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="0=0⇒{BasicP_event_intention(arrive_at ↦ c)}={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(arrive_at ↦ c))}"/>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="c∈Terms"/>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="arrive_at∈Event_predicate_symbols"/>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬a=c">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬b=c">
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="Point={a,b,c}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬a=b">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="INITIALISATION/inv6/INV" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p2,p3"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2,p3"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p4" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18,p19"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p18,p19"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p26"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p29"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p31"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p32"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p33"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34"/>
                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p35"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p36" org.eventb.core.prHyps=""/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="0=1⇒Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="partition(Point,{a},{b},{c})">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬a=c">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬b=c">
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="Point={a,b,c}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬a=b">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="0=1⇒{BasicP_event_intention(arrive_at ↦ c)}={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}]))}"/>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="INITIALISATION/inv7/INV" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p2,p3"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2,p3"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p4" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18,p19"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p18,p19"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p26"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p29"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p31"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p32"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p33"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p35" org.eventb.core.prHyps=""/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="intentions'" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="partition(Point,{a},{b},{c})">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="0=1⇒intentions'={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬a=c">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬b=c">
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="Point={a,b,c}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬a=b">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="SelectRelevantPlans/grd4/WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="" org.eventb.core.prHyps="p0" org.eventb.core.prSets="Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p2,p3"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2,p3"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p0" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p4,p5,p6,p7"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p4,p5,p6,p7"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p8" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p9,p10,p11,p12,p13,p14,p15"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p9,p10,p11,p12,p13,p14,p15"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17,p18"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p17,p18"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20,p21,p22,p23"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p20,p21,p22,p23"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p24" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p25"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p28"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p30"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p32"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p36"/>
                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p37" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p38"/>
                                                                <org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p39"/>
                                                                <org.eventb.core.prHypAction name="REWRITE5" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p40"/>
                                                                <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p41"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p42"/>
                                                                        <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p43"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p44"/>
                                                                        <org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p45"/>
                                                                        <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p46"/>
                                                                        <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p47"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p51"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE8" org.eventb.core.prHidden="p52" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p53"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE9" org.eventb.core.prHidden="p54" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p55"/>
                                                                        <org.eventb.core.prHypAction name="HIDE10" org.eventb.core.prHyps="p56"/>
                                                                        <org.eventb.core.prHypAction name="HIDE11" org.eventb.core.prHyps="p57"/>
                                                                        <org.eventb.core.prHypAction name="HIDE12" org.eventb.core.prHyps="p58"/>
                                                                        <org.eventb.core.prHypAction name="HIDE13" org.eventb.core.prHyps="p59"/>
                                                                        <org.eventb.core.prHypAction name="HIDE14" org.eventb.core.prHyps="p60"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE15" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE16" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p62"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE17" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE18" org.eventb.core.prHidden="p41" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p64"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'">
                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p66"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p67"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p68"/>
                                                                                <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p61"/>
                                                                                <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p62"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p63" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p69"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p64" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p70"/>
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with Point={a,b,c}" org.eventb.core.prHyps="p4">
                                                                                    <org.eventb.core.prAnte name="'">
                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p71"/>
                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p72"/>
                                                                                        <org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p3"/>
                                                                                        <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p4"/>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
        <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prPred name="p52" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p40" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p42" org.eventb.core.predicate="Point⊆Terms"/>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="counter=1⇒arrive_at∈Event_predicate_symbols∧c∈Terms∧plan_rules[{arrive_at ↦ c}]∈ℙ(ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
            <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="counter=1⇒intentions={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
            <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p49" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p71" org.eventb.core.predicate="Terms={a,b,c}∪VectorTerms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="counter=0⇒arrive_at∈Event_predicate_symbols∧c∈Terms">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p59" org.eventb.core.predicate="external_events∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="external_events" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p65" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p55" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p56" org.eventb.core.predicate="Initial_belief_base∈ℙ(Belief_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Initial_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p43" org.eventb.core.predicate="VectorTerms⊆Terms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p60" org.eventb.core.predicate="intentions∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬b=c"/>
        <org.eventb.core.prPred name="p68" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p58" org.eventb.core.predicate="belief_base∈ℙ(Belief_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="¬a=b"/>
        <org.eventb.core.prPred name="p47" org.eventb.core.predicate="plan_rules∈Event_predicate_symbols × Terms ↔ ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p66" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p72" org.eventb.core.predicate="{a,b,c}∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p50" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p48" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p61" org.eventb.core.predicate="counter=0⇒⊤∧⊤">
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p41" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p46" org.eventb.core.predicate="addition_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="addition_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="counter=0⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(arrive_at ↦ c))}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p57" org.eventb.core.predicate="Initial_external_event_set∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Initial_external_event_set" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="counter=1⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}]))}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
            <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p45" org.eventb.core.predicate="deletion_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="deletion_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p67" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p69" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p44" org.eventb.core.predicate="preconditions∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="preconditions" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p39" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p63" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="partition(Point,{a},{b},{c})"/>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p51" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="counter=0⇒intentions={BasicP_event_intention(arrive_at ↦ c)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p64" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="counter=0⇒BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬a=c"/>
        <org.eventb.core.prPred name="p53" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p54" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="Point={a,b,c}"/>
        <org.eventb.core.prPred name="p70" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="counter=1⇒Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
            <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p62" org.eventb.core.predicate="counter=1⇒⊤∧⊤∧⊤">
            <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="SelectRelevantPlans/inv5/INV" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="p1,p2,p3,p4" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms" org.eventb.core.psManual="true">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p5" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p6,p7"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p6,p7"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p4" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p8,p9,p10,p11"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p8,p9,p10,p11"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p13,p14,p15,p16,p17,p18,p19"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p13,p14,p15,p16,p17,p18,p19"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21,p22"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p21,p22"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p24,p25,p26,p27"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p24,p25,p26,p27"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p29"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p32"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p34"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p36"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p37"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p32" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p38"/>
                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p39"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p40"/>
                                                                        <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p41"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p42"/>
                                                                        <org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p43"/>
                                                                        <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p44"/>
                                                                        <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p45"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE8" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p51"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE9" org.eventb.core.prHidden="p52" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p53"/>
                                                                        <org.eventb.core.prHypAction name="HIDE10" org.eventb.core.prHyps="p54"/>
                                                                        <org.eventb.core.prHypAction name="HIDE11" org.eventb.core.prHyps="p55"/>
                                                                        <org.eventb.core.prHypAction name="HIDE12" org.eventb.core.prHyps="p56"/>
                                                                        <org.eventb.core.prHypAction name="HIDE13" org.eventb.core.prHyps="p57"/>
                                                                        <org.eventb.core.prHypAction name="HIDE14" org.eventb.core.prHyps="p58"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE15" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p59"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE16" org.eventb.core.prHidden="p39" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p60"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'">
                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p62"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p64"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE5" org.eventb.core.prHidden="p60" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p66"/>
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with newnextP=Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])" org.eventb.core.prHyps="p2">
                                                                                    <org.eventb.core.prAnte name="'">
                                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
                                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with Point={a,b,c}" org.eventb.core.prHyps="p9">
                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p67"/>
                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p68"/>
                                                                                                <org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p6,p7"/>
                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p9"/>
                                                                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p69" org.eventb.core.prHyps="p71" org.eventb.core.prInfHyps="p70"/>
                                                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p80">
                                                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p3" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p72"/>
                                                                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p73" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p74"/>
                                                                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p75" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p76"/>
                                                                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p77" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p78"/>
                                                                                                                <org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p70" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p79"/>
                                                                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p74" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p81"/>
                                                                                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p78" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p82"/>
                                                                                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p79" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p83"/>
                                                                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p81"/>
                                                                                                                                <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p82"/>
                                                                                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p83"/>
                                                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="">
                                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p84">
                                                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ct hyp (counter+1=0)" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p84">
                                                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="p86">
                                                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p84"/>
                                                                                                                                                <org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
                                                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                                                        <org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p1"/>
                                                                                                                                                        <org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24,p14,p15,p22,p10,p71,p16,p21,p27,p67,p68,p88,p25,p13,p89,p26,p17,p18,p19,p8,p11,p90,p36"/>
                                                                                                                                                                <org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="PP" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="p72,p86,p1">
                                                                                                                                                                    <org.eventb.core.prString name=".arg" org.eventb.core.prSValue="R30000"/>
                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                </org.eventb.core.prRule>
                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                        </org.eventb.core.prRule>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                </org.eventb.core.prRule>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
        <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prIdent name="newnextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="nextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="terms" org.eventb.core.type="Terms"/>
        <org.eventb.core.prPred name="p50" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p40" org.eventb.core.predicate="Point⊆Terms"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p78" org.eventb.core.predicate="counter=1⇒arrive_at∈Event_predicate_symbols∧c∈Terms∧plan_rules[{arrive_at ↦ c}]∈ℙ(ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p76" org.eventb.core.predicate="counter=1⇒intentions={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p47" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p67" org.eventb.core.predicate="Terms={a,b,c}∪VectorTerms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p88" org.eventb.core.predicate="basic_program_event_intention(nextP)=event ↦ terms"/>
        <org.eventb.core.prPred name="p57" org.eventb.core.predicate="external_events∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="external_events" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p74" org.eventb.core.predicate="counter=0⇒arrive_at∈Event_predicate_symbols∧c∈Terms"/>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p61" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p53" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p54" org.eventb.core.predicate="Initial_belief_base∈ℙ(Belief_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Initial_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p41" org.eventb.core.predicate="VectorTerms⊆Terms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p58" org.eventb.core.predicate="intentions∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬b=c"/>
        <org.eventb.core.prPred name="p64" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p90" org.eventb.core.predicate="intention∈intentions"/>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p56" org.eventb.core.predicate="belief_base∈ℙ(Belief_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="counter∈ℕ"/>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="¬a=b"/>
        <org.eventb.core.prPred name="p45" org.eventb.core.predicate="plan_rules∈Event_predicate_symbols × Terms ↔ ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p62" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p68" org.eventb.core.predicate="{a,b,c}∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p48" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p46" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p81" org.eventb.core.predicate="counter=0⇒⊤∧⊤"/>
        <org.eventb.core.prPred name="p39" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p44" org.eventb.core.predicate="addition_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="addition_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p84" org.eventb.core.predicate="counter+1=0"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="counter=0⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(arrive_at ↦ c))}"/>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p55" org.eventb.core.predicate="Initial_external_event_set∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Initial_external_event_set" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p75" org.eventb.core.predicate="counter=1⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}]))}"/>
        <org.eventb.core.prPred name="p43" org.eventb.core.predicate="deletion_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="deletion_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p70" org.eventb.core.predicate="counter+1=0⇒⊤∧BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="event ↦ terms∈dom(plan_rules)"/>
        <org.eventb.core.prPred name="p63" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p65" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p42" org.eventb.core.predicate="preconditions∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="preconditions" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p85" org.eventb.core.predicate="(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={BasicP_event_intention(arrive_at ↦ c)}"/>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="newnextP=Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])"/>
        <org.eventb.core.prPred name="p59" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p71" org.eventb.core.predicate="nextP∈next_programs_to_progress(intention,belief_base)"/>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="partition(Point,{a},{b},{c})"/>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p49" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="counter+1=0⇒(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(arrive_at ↦ c))}"/>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p87" org.eventb.core.predicate="¬counter+1=0"/>
        <org.eventb.core.prPred name="p89" org.eventb.core.predicate="isBasicP_event_intention(nextP)"/>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="plan_rules[{event ↦ terms}]≠(∅ ⦂ ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p72" org.eventb.core.predicate="counter=0⇒intentions={BasicP_event_intention(arrive_at ↦ c)}"/>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p60" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p73" org.eventb.core.predicate="counter=0⇒BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬a=c"/>
        <org.eventb.core.prPred name="p51" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p86" org.eventb.core.predicate="¬(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={BasicP_event_intention(arrive_at ↦ c)}"/>
        <org.eventb.core.prPred name="p52" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p79" org.eventb.core.predicate="counter+1=0⇒arrive_at∈Event_predicate_symbols∧c∈Terms"/>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="Point={a,b,c}"/>
        <org.eventb.core.prPred name="p66" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p77" org.eventb.core.predicate="counter=1⇒Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p80" org.eventb.core.predicate="counter+1=0⇒(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={BasicP_event_intention(arrive_at ↦ c)}"/>
        <org.eventb.core.prPred name="p82" org.eventb.core.predicate="counter=1⇒⊤∧⊤∧⊤"/>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p69" org.eventb.core.predicate="counter+1=0⇒nextP∈next_programs_to_progress(intention,belief_base)∧BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p83" org.eventb.core.predicate="counter+1=0⇒⊤∧⊤"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r8" org.eventb.core.prRID="com.clearsy.atelierb.provers.core.externalPP:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.contrL1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="SelectRelevantPlans/inv6/INV" org.eventb.core.confidence="0" org.eventb.core.prFresh="p_set_of_guarded_plan_bodies,p_basic_program_action_intention,p_failure_condition,p_basic_program_event_intention,p_current_plan,p_triggering_event,p_head_intention,p_left_intention,p_procedural_program,p_backup_plans,p_tail_intention,p_success_condition,p_right_intention" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28,p29,p30,p31,p32,p33" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms" org.eventb.core.psManual="true">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34,p35"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p34,p35"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p8" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p36,p37,p38,p39"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p36,p37,p38,p39"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p40,p41,p42,p43,p44,p45,p46"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p40,p41,p42,p43,p44,p45,p46"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47,p48"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p47,p48"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p7" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49,p50,p51,p52"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p49,p50,p51,p52"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p53"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p54"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p13" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p55"/>
                                                        <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p56" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p57"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p69">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p58"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p60"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p62" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
                                                                <org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p64"/>
                                                                <org.eventb.core.prHypAction name="REWRITE5" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
                                                                <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p54" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p66"/>
                                                                <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p67"/>
                                                                <org.eventb.core.prHypAction name="REWRITE8" org.eventb.core.prHidden="p57" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p68"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p70"/>
                                                                        <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p71"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p72"/>
                                                                        <org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p73"/>
                                                                        <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p74"/>
                                                                        <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p75"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p76"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p24" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p77"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE8" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p78"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE9" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p79"/>
                                                                        <org.eventb.core.prHypAction name="HIDE10" org.eventb.core.prHyps="p80"/>
                                                                        <org.eventb.core.prHypAction name="HIDE11" org.eventb.core.prHyps="p81"/>
                                                                        <org.eventb.core.prHypAction name="HIDE12" org.eventb.core.prHyps="p82"/>
                                                                        <org.eventb.core.prHypAction name="HIDE13" org.eventb.core.prHyps="p83"/>
                                                                        <org.eventb.core.prHypAction name="HIDE14" org.eventb.core.prHyps="p84"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE15" org.eventb.core.prHidden="p60" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p85"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE16" org.eventb.core.prHidden="p63" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p86"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE17" org.eventb.core.prHidden="p66" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p87"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE18" org.eventb.core.prHidden="p67" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p88"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE19" org.eventb.core.prHidden="p68" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p89"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'">
                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p76" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p90"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p77" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p91"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p78" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p92"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p79" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p93"/>
                                                                                <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p85"/>
                                                                                <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p86"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p87" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p94"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p88" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p95"/>
                                                                                <org.eventb.core.prHypAction name="HIDE8" org.eventb.core.prHyps="p89"/>
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p69" org.eventb.core.prHyps="">
                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p97" org.eventb.core.prHyps="p96">
                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with newnextP=Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])" org.eventb.core.prGoal="p97" org.eventb.core.prHyps="p2">
                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p98">
                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with Point={a,b,c}" org.eventb.core.prHyps="p37">
                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p99"/>
                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p100"/>
                                                                                                        <org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p34,p35"/>
                                                                                                        <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p37"/>
                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                <org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p49,p41,p42,p48,p38,p3,p43,p47,p52,p99,p100,p10,p50,p40,p11,p51,p44,p45,p46,p36,p39,p19,p64"/>
                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                        <org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p23"/>
                                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                <org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p58"/>
                                                                                                                                <org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (counter=0⇒intentions={BasicP_event_intention(arrive_at ↦ c)})" org.eventb.core.prHyps="p58">
                                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p101">
                                                                                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p58"/>
                                                                                                                                        <org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ML" org.eventb.core.prGoal="p101" org.eventb.core.prHyps="p21,p14,p9,p5,p27,p28,p16,p6,p32,p17,p4,p23,p19,p3,p11,p10,p31,p34,p35,p36,p37,p38,p39,p40,p41,p42,p43,p44,p45,p46,p47,p48,p49,p50,p51,p52,p61,p64,p65,p90,p91,p92,p93,p94,p95,p96,p99,p100">
                                                                                                                                            <org.eventb.core.prString name=".arg" org.eventb.core.prSValue="0;1:500"/>
                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p102">
                                                                                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p58"/>
                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intentions={BasicP_event_intention(arrive_at ↦ c)}" org.eventb.core.prGoal="p98" org.eventb.core.prHyps="p102">
                                                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p104">
                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p61" org.eventb.core.prInfHyps="p103"/>
                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p61"/>
                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p102"/>
                                                                                                                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p103" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p105"/>
                                                                                                                                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p61" org.eventb.core.prHyps="p105" org.eventb.core.prInfHyps="p106"/>
                                                                                                                                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p106"/>
                                                                                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                <org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p19"/>
                                                                                                                                                                                <org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="lae in intention∈intentions" org.eventb.core.prHyps="">
                                                                                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                                                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="p102" org.eventb.core.prInfHyps="p107"/>
                                                                                                                                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p107" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p108"/>
                                                                                                                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with intention=BasicP_event_intention(arrive_at ↦ c)" org.eventb.core.prGoal="p104" org.eventb.core.prHyps="p108">
                                                                                                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p109">
                                                                                                                                                                                                        <org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p108"/>
                                                                                                                                                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p109" org.eventb.core.prHyps="">
                                                                                                                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p110">
                                                                                                                                                                                                                <org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="update_intention expansion on goal" org.eventb.core.prGoal="p110" org.eventb.core.prHyps="">
                                                                                                                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p111">
                                                                                                                                                                                                                        <org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p111" org.eventb.core.prHyps=""/>
                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p112" org.eventb.core.prHyps="p111">
                                                                                                                                                                                                                        <org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p111"/>
                                                                                                                                                                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p112" org.eventb.core.prHyps="">
                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p113">
                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p111"/>
                                                                                                                                                                                                                                <org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p113" org.eventb.core.prHyps="">
                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p114"/>
                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p115">
                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
                                                                                                                                                                                                                                                <org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                        <org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p11,p3"/>
                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="lae in nextP∈next_programs_to_progress(intention,belief_base)" org.eventb.core.prHyps="">
                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p3" org.eventb.core.prHyps="p108" org.eventb.core.prInfHyps="p116"/>
                                                                                                                                                                                                                                                                <org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in nextP" org.eventb.core.prHyps="p11">
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p117">
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=BasicP_event_intention(p_basic_program_event_intention)" org.eventb.core.prHyps="p117">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p118"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p119"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p120"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p117"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p118" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p121"/>
                                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_basic_program_event_intention=event ↦ terms" org.eventb.core.prHyps="p121">
                                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p119" org.eventb.core.prInfHyps="p122"/>
                                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p120" org.eventb.core.prInfHyps="p123"/>
                                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p119,p120"/>
                                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p121"/>
                                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p124">
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=BasicP_action_intention(p_basic_program_action_intention)" org.eventb.core.prHyps="p124">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p125"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p126"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p127"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p124"/>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p128">
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_head_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_tail_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=Sequence_intention(p_head_intention,p_tail_intention)" org.eventb.core.prHyps="p128">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p129"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p130"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p131"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p128"/>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p132">
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_left_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_right_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=Concurrency_intention(p_left_intention,p_right_intention)" org.eventb.core.prHyps="p132">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p133"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p134"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p135"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p132"/>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="+" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p136">
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_procedural_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=Declarative_goal_intention(p_success_condition,p_procedural_program,p_failure_condition)" org.eventb.core.prHyps="p136">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p137"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p138"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p139"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p136"/>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="," org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p140">
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_current_plan" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=Try_current_with_backups(p_current_plan,p_backup_plans)" org.eventb.core.prHyps="p140">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p141"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p142"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p143"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p140"/>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="-" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p144">
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prIdent name="p_set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=Relevant_plans(p_triggering_event,p_set_of_guarded_plan_bodies)" org.eventb.core.prHyps="p144">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p145"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p146"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p147"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p144"/>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="." org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p148">
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=Nil" org.eventb.core.prHyps="p148">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p149"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p150"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p151"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p148"/>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prAnte name="/" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p152">
                                                                                                                                                                                                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with nextP=False" org.eventb.core.prHyps="p152">
                                                                                                                                                                                                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p153"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p154"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p155"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p11,p116"/>
                                                                                                                                                                                                                                                                                <org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p152"/>
                                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
                                                                                                                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
                                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                                    <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p156"/>
                                                                                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                                    <org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BasicTheory"/>
                                                                                                                                                                                                                    <org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="AgentProgramConstructor"/>
                                                                                                                                                                                                                    <org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AgentProgramConstructor.update_intention case 0"/>
                                                                                                                                                                                                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
                                                                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
                                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                                </org.eventb.core.prRule>
                                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                                        </org.eventb.core.prRule>
                                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                                </org.eventb.core.prRule>
                                                                                                                            </org.eventb.core.prAnte>
                                                                                                                        </org.eventb.core.prRule>
                                                                                                                    </org.eventb.core.prAnte>
                                                                                                                </org.eventb.core.prRule>
                                                                                                            </org.eventb.core.prAnte>
                                                                                                        </org.eventb.core.prRule>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                </org.eventb.core.prRule>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="Initial_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="Initial_external_event_set" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
        <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="addition_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
        <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
        <org.eventb.core.prIdent name="deletion_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prIdent name="newnextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        <org.eventb.core.prIdent name="nextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="preconditions" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        <org.eventb.core.prIdent name="terms" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p53" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤"/>
        <org.eventb.core.prPred name="p70" org.eventb.core.predicate="Point⊆Terms"/>
        <org.eventb.core.prPred name="p98" org.eventb.core.predicate="(intentions ∖ {intention})∪{update_intention(intention,nextP,Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}]),belief_base)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p63" org.eventb.core.predicate="counter=1⇒arrive_at∈Event_predicate_symbols∧c∈Terms∧plan_rules[{arrive_at ↦ c}]∈ℙ(ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p136" org.eventb.core.predicate="nextP=Declarative_goal_intention(p_success_condition,p_procedural_program,p_failure_condition)">
            <org.eventb.core.prIdent name="p_failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="p_procedural_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p61" org.eventb.core.predicate="counter=1⇒intentions={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p52" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}"/>
        <org.eventb.core.prPred name="p99" org.eventb.core.predicate="Terms={a,b,c}∪VectorTerms"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="deletion_sets={terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point ∣ travel ↦ Vector(terms1 ↦ terms2) ↦ (at ↦ terms1)}"/>
        <org.eventb.core.prPred name="p89" org.eventb.core.predicate="counter+1=1⇒⊤∧⊤∧⊤"/>
        <org.eventb.core.prPred name="p155" org.eventb.core.predicate="(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)"/>
        <org.eventb.core.prPred name="p60" org.eventb.core.predicate="counter=0⇒arrive_at∈Event_predicate_symbols∧c∈Terms"/>
        <org.eventb.core.prPred name="p83" org.eventb.core.predicate="external_events∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="external_events" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms"/>
        <org.eventb.core.prPred name="p133" org.eventb.core.predicate="basic_program_event_intention(Concurrency_intention(p_left_intention,p_right_intention))=event ↦ terms">
            <org.eventb.core.prIdent name="p_left_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_right_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="preconditions={terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point ∣ travel ↦ Vector(terms1 ↦ terms2) ↦ (at ↦ terms1)}∪{terms⦂Terms·terms∈Point ∣ smile_at ↦ terms ↦ (at ↦ terms)}∪{terms⦂Terms·terms∈Point ∣ cry_at ↦ terms ↦ (at ↦ terms)}"/>
        <org.eventb.core.prPred name="p90" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p96" org.eventb.core.predicate="counter+1=1"/>
        <org.eventb.core.prPred name="p79" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p108" org.eventb.core.predicate="intention=BasicP_event_intention(arrive_at ↦ c)"/>
        <org.eventb.core.prPred name="p121" org.eventb.core.predicate="p_basic_program_event_intention=event ↦ terms">
            <org.eventb.core.prIdent name="p_basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p71" org.eventb.core.predicate="VectorTerms⊆Terms"/>
        <org.eventb.core.prPred name="p146" org.eventb.core.predicate="isBasicP_event_intention(Relevant_plans(p_triggering_event,p_set_of_guarded_plan_bodies))">
            <org.eventb.core.prIdent name="p_set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
            <org.eventb.core.prIdent name="p_triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p39" org.eventb.core.predicate="¬b=c"/>
        <org.eventb.core.prPred name="p93" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p113" org.eventb.core.predicate="event=arrive_at∧terms=c∧plan_rules[{event ↦ terms}]=plan_rules[{arrive_at ↦ c}]"/>
        <org.eventb.core.prPred name="p82" org.eventb.core.predicate="belief_base∈ℙ(Belief_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p132" org.eventb.core.predicate="nextP=Concurrency_intention(p_left_intention,p_right_intention)">
            <org.eventb.core.prIdent name="p_left_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_right_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p48" org.eventb.core.predicate="¬arrive_at=play_at"/>
        <org.eventb.core.prPred name="p75" org.eventb.core.predicate="plan_rules∈Event_predicate_symbols × Terms ↔ ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p102" org.eventb.core.predicate="intentions={BasicP_event_intention(arrive_at ↦ c)}"/>
        <org.eventb.core.prPred name="p100" org.eventb.core.predicate="{a,b,c}∩VectorTerms=(∅ ⦂ ℙ(Terms))"/>
        <org.eventb.core.prPred name="p123" org.eventb.core.predicate="BasicP_event_intention(event ↦ terms)∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)"/>
        <org.eventb.core.prPred name="p85" org.eventb.core.predicate="counter=0⇒⊤∧⊤"/>
        <org.eventb.core.prPred name="p40" org.eventb.core.predicate="¬at=cried_at"/>
        <org.eventb.core.prPred name="p114" org.eventb.core.predicate="event=arrive_at"/>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="counter=0⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(arrive_at ↦ c))}"/>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∃basic_program_event_intention0⦂Event_predicate_symbols×Terms·nextP=BasicP_event_intention(basic_program_event_intention0)"/>
        <org.eventb.core.prPred name="p81" org.eventb.core.predicate="Initial_external_event_set∈ℙ(Event_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p110" org.eventb.core.predicate="update_intention(BasicP_event_intention(arrive_at ↦ c),nextP,Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}]),belief_base)=Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])"/>
        <org.eventb.core.prPred name="p97" org.eventb.core.predicate="(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p103" org.eventb.core.predicate="counter=1⇒{BasicP_event_intention(arrive_at ↦ c)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p150" org.eventb.core.predicate="isBasicP_event_intention(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p126" org.eventb.core.predicate="isBasicP_event_intention(BasicP_action_intention(p_basic_program_action_intention))">
            <org.eventb.core.prIdent name="p_basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p69" org.eventb.core.predicate="counter+1=1⇒(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p73" org.eventb.core.predicate="deletion_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms"/>
        <org.eventb.core.prPred name="p64" org.eventb.core.predicate="event ↦ terms∈dom(plan_rules)"/>
        <org.eventb.core.prPred name="p105" org.eventb.core.predicate="¬counter=1"/>
        <org.eventb.core.prPred name="p92" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p94" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p65" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)"/>
        <org.eventb.core.prPred name="p68" org.eventb.core.predicate="counter+1=1⇒arrive_at∈Event_predicate_symbols∧c∈Terms∧plan_rules[{arrive_at ↦ c}]∈ℙ(ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p151" org.eventb.core.predicate="(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)"/>
        <org.eventb.core.prPred name="p87" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p115" org.eventb.core.predicate="terms=c"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="nextP∈next_programs_to_progress(intention,belief_base)"/>
        <org.eventb.core.prPred name="p43" org.eventb.core.predicate="¬at=smiled_at"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="Initial_external_event_set={arrive_at ↦ c}"/>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})"/>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="partition(Point,{a},{b},{c})"/>
        <org.eventb.core.prPred name="p50" org.eventb.core.predicate="¬travel=smile_at"/>
        <org.eventb.core.prPred name="p138" org.eventb.core.predicate="isBasicP_event_intention(Declarative_goal_intention(p_success_condition,p_procedural_program,p_failure_condition))">
            <org.eventb.core.prIdent name="p_failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="p_procedural_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p140" org.eventb.core.predicate="nextP=Try_current_with_backups(p_current_plan,p_backup_plans)">
            <org.eventb.core.prIdent name="p_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_current_plan" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p58" org.eventb.core.predicate="counter=0⇒intentions={BasicP_event_intention(arrive_at ↦ c)}"/>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms"/>
        <org.eventb.core.prPred name="p44" org.eventb.core.predicate="¬smiled_at=next"/>
        <org.eventb.core.prPred name="p129" org.eventb.core.predicate="basic_program_event_intention(Sequence_intention(p_head_intention,p_tail_intention))=event ↦ terms">
            <org.eventb.core.prIdent name="p_head_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_tail_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p78" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)"/>
        <org.eventb.core.prPred name="p125" org.eventb.core.predicate="basic_program_event_intention(BasicP_action_intention(p_basic_program_action_intention))=event ↦ terms">
            <org.eventb.core.prIdent name="p_basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p118" org.eventb.core.predicate="basic_program_event_intention(BasicP_event_intention(p_basic_program_event_intention))=event ↦ terms">
            <org.eventb.core.prIdent name="p_basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p111" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p134" org.eventb.core.predicate="isBasicP_event_intention(Concurrency_intention(p_left_intention,p_right_intention))">
            <org.eventb.core.prIdent name="p_left_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_right_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="Point={a,b,c}"/>
        <org.eventb.core.prPred name="p95" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)"/>
        <org.eventb.core.prPred name="p154" org.eventb.core.predicate="isBasicP_event_intention(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p130" org.eventb.core.predicate="isBasicP_event_intention(Sequence_intention(p_head_intention,p_tail_intention))">
            <org.eventb.core.prIdent name="p_head_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_tail_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))"/>
        <org.eventb.core.prPred name="p46" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}"/>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="b ↦ c∈dom(Vector)"/>
        <org.eventb.core.prPred name="p153" org.eventb.core.predicate="basic_program_event_intention(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=event ↦ terms"/>
        <org.eventb.core.prPred name="p112" org.eventb.core.predicate="Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])=Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])"/>
        <org.eventb.core.prPred name="p49" org.eventb.core.predicate="¬travel=cry_at"/>
        <org.eventb.core.prPred name="p66" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p141" org.eventb.core.predicate="basic_program_event_intention(Try_current_with_backups(p_current_plan,p_backup_plans))=event ↦ terms">
            <org.eventb.core.prIdent name="p_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_current_plan" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p41" org.eventb.core.predicate="¬at=next"/>
        <org.eventb.core.prPred name="p76" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="counter+1=1⇒(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}]))}"/>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="basic_program_event_intention(nextP)=event ↦ terms"/>
        <org.eventb.core.prPred name="p56" org.eventb.core.predicate="counter+1=1⇒nextP∈next_programs_to_progress(intention,belief_base)∧Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p117" org.eventb.core.predicate="nextP=BasicP_event_intention(p_basic_program_event_intention)">
            <org.eventb.core.prIdent name="p_basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p107" org.eventb.core.predicate="intention∈{BasicP_event_intention(arrive_at ↦ c)}"/>
        <org.eventb.core.prPred name="p156" org.eventb.core.predicate="plan_rules[{event ↦ terms}]=plan_rules[{arrive_at ↦ c}]"/>
        <org.eventb.core.prPred name="p128" org.eventb.core.predicate="nextP=Sequence_intention(p_head_intention,p_tail_intention)">
            <org.eventb.core.prIdent name="p_head_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_tail_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p80" org.eventb.core.predicate="Initial_belief_base∈ℙ(Belief_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="a ↦ b∈dom(Vector)"/>
        <org.eventb.core.prPred name="p54" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p84" org.eventb.core.predicate="intentions∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="intention∈intentions"/>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Vector∈Point × Point ↣ VectorTerms"/>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})"/>
        <org.eventb.core.prPred name="p55" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤"/>
        <org.eventb.core.prPred name="p122" org.eventb.core.predicate="isBasicP_event_intention(BasicP_event_intention(event ↦ terms))"/>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="counter∈ℕ"/>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="¬a=b"/>
        <org.eventb.core.prPred name="p91" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p104" org.eventb.core.predicate="({BasicP_event_intention(arrive_at ↦ c)} ∖ {intention})∪{update_intention(intention,nextP,Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}]),belief_base)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})"/>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p57" org.eventb.core.predicate="counter+1=1⇒⊤∧Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p116" org.eventb.core.predicate="nextP∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)"/>
        <org.eventb.core.prPred name="p67" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)"/>
        <org.eventb.core.prPred name="p74" org.eventb.core.predicate="addition_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms"/>
        <org.eventb.core.prPred name="p147" org.eventb.core.predicate="Relevant_plans(p_triggering_event,p_set_of_guarded_plan_bodies)∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)">
            <org.eventb.core.prIdent name="p_set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
            <org.eventb.core.prIdent name="p_triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p45" org.eventb.core.predicate="¬cried_at=next"/>
        <org.eventb.core.prPred name="p119" org.eventb.core.predicate="isBasicP_event_intention(BasicP_event_intention(p_basic_program_event_intention))">
            <org.eventb.core.prIdent name="p_basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p143" org.eventb.core.predicate="Try_current_with_backups(p_current_plan,p_backup_plans)∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)">
            <org.eventb.core.prIdent name="p_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_current_plan" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="counter=1⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}]))}"/>
        <org.eventb.core.prPred name="p148" org.eventb.core.predicate="nextP=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p149" org.eventb.core.predicate="basic_program_event_intention(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))=event ↦ terms"/>
        <org.eventb.core.prPred name="p72" org.eventb.core.predicate="preconditions∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms"/>
        <org.eventb.core.prPred name="p145" org.eventb.core.predicate="basic_program_event_intention(Relevant_plans(p_triggering_event,p_set_of_guarded_plan_bodies))=event ↦ terms">
            <org.eventb.core.prIdent name="p_set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
            <org.eventb.core.prIdent name="p_triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="newnextP=Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])"/>
        <org.eventb.core.prPred name="p47" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}"/>
        <org.eventb.core.prPred name="p137" org.eventb.core.predicate="basic_program_event_intention(Declarative_goal_intention(p_success_condition,p_procedural_program,p_failure_condition))=event ↦ terms">
            <org.eventb.core.prIdent name="p_failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="p_procedural_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p77" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="addition_sets={terms⦂Terms,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧terms=Vector(terms1 ↦ terms2) ∣ travel ↦ terms ↦ (at ↦ terms2)}∪{terms⦂Terms·terms∈Point ∣ cry_at ↦ terms ↦ (cried_at ↦ terms)}∪{terms⦂Terms·terms∈Point ∣ smile_at ↦ terms ↦ (smiled_at ↦ terms)}"/>
        <org.eventb.core.prPred name="p139" org.eventb.core.predicate="Declarative_goal_intention(p_success_condition,p_procedural_program,p_failure_condition)∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)">
            <org.eventb.core.prIdent name="p_failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
            <org.eventb.core.prIdent name="p_procedural_program" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="isBasicP_event_intention(nextP)"/>
        <org.eventb.core.prPred name="p152" org.eventb.core.predicate="nextP=(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="plan_rules[{event ↦ terms}]≠(∅ ⦂ ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p120" org.eventb.core.predicate="BasicP_event_intention(p_basic_program_event_intention)∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)">
            <org.eventb.core.prIdent name="p_basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p142" org.eventb.core.predicate="isBasicP_event_intention(Try_current_with_backups(p_current_plan,p_backup_plans))">
            <org.eventb.core.prIdent name="p_backup_plans" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_current_plan" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p127" org.eventb.core.predicate="BasicP_action_intention(p_basic_program_action_intention)∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)">
            <org.eventb.core.prIdent name="p_basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="Terms=Point∪VectorTerms"/>
        <org.eventb.core.prPred name="p88" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)"/>
        <org.eventb.core.prPred name="p124" org.eventb.core.predicate="nextP=BasicP_action_intention(p_basic_program_action_intention)">
            <org.eventb.core.prIdent name="p_basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p59" org.eventb.core.predicate="counter=0⇒BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="a ↦ c∈dom(Vector)"/>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="¬a=c"/>
        <org.eventb.core.prPred name="p131" org.eventb.core.predicate="Sequence_intention(p_head_intention,p_tail_intention)∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)">
            <org.eventb.core.prIdent name="p_head_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_tail_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p101" org.eventb.core.predicate="counter=0"/>
        <org.eventb.core.prPred name="p42" org.eventb.core.predicate="¬smiled_at=cried_at"/>
        <org.eventb.core.prPred name="p62" org.eventb.core.predicate="counter=1⇒Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p109" org.eventb.core.predicate="({BasicP_event_intention(arrive_at ↦ c)} ∖ {BasicP_event_intention(arrive_at ↦ c)})∪{update_intention(BasicP_event_intention(arrive_at ↦ c),nextP,Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}]),belief_base)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p106" org.eventb.core.predicate="⊥⇒intentions={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p135" org.eventb.core.predicate="Concurrency_intention(p_left_intention,p_right_intention)∈next_programs_to_progress(BasicP_event_intention(arrive_at ↦ c),belief_base)">
            <org.eventb.core.prIdent name="p_left_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
            <org.eventb.core.prIdent name="p_right_intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p144" org.eventb.core.predicate="nextP=Relevant_plans(p_triggering_event,p_set_of_guarded_plan_bodies)">
            <org.eventb.core.prIdent name="p_set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
            <org.eventb.core.prIdent name="p_triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="plan1∪plan2∪plan3∪plan4=plan_rules"/>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="Initial_belief_base={at ↦ a,next ↦ Vector(a ↦ b),next ↦ Vector(b ↦ c),next ↦ Vector(a ↦ c)}"/>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p86" org.eventb.core.predicate="counter=1⇒⊤∧⊤∧⊤"/>
        <org.eventb.core.prPred name="p51" org.eventb.core.predicate="¬smile_at=cry_at"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
        <org.eventb.core.prReas name="r8" org.eventb.core.prRID="com.clearsy.atelierb.provers.core.externalML:1"/>
        <org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.locEq"/>
        <org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
        <org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
        <org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.impE:2"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="SelectRelevantPlans/inv7/INV" org.eventb.core.confidence="0" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="p1,p2" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p3" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p4,p5"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p4,p5"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p2" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p6,p7,p8,p9"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p6,p7,p8,p9"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p10" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p11,p12,p13,p14,p15,p16,p17"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p11,p12,p13,p14,p15,p16,p17"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p19,p20"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p19,p20"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p22,p23,p24,p25"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p22,p23,p24,p25"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p27"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p30"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p32"/>
                                                        <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p34"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p36" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p37"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p38"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p39"/>
                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p32" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p40"/>
                                                                <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p34"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p41"/>
                                                                        <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p42"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p43"/>
                                                                        <org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p44"/>
                                                                        <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p45"/>
                                                                        <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p46"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p48"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p50"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE8" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p52"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE9" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p54"/>
                                                                        <org.eventb.core.prHypAction name="HIDE10" org.eventb.core.prHyps="p55"/>
                                                                        <org.eventb.core.prHypAction name="HIDE11" org.eventb.core.prHyps="p56"/>
                                                                        <org.eventb.core.prHypAction name="HIDE12" org.eventb.core.prHyps="p57"/>
                                                                        <org.eventb.core.prHypAction name="HIDE13" org.eventb.core.prHyps="p58"/>
                                                                        <org.eventb.core.prHypAction name="HIDE14" org.eventb.core.prHyps="p59"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE15" org.eventb.core.prHidden="p39" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p60"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE16" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'">
                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p62"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p52" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p64"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p54" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p60" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p66"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE5" org.eventb.core.prHidden="p61" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p67"/>
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p69" org.eventb.core.prHyps="p68">
                                                                                        <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with newnextP=Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])" org.eventb.core.prGoal="p69" org.eventb.core.prHyps="p1">
                                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p70">
                                                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p1"/>
                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with Point={a,b,c}" org.eventb.core.prHyps="p6">
                                                                                                    <org.eventb.core.prAnte name="'">
                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p71"/>
                                                                                                        <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p72"/>
                                                                                                        <org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p4,p5"/>
                                                                                                        <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p6"/>
                                                                                                    </org.eventb.core.prAnte>
                                                                                                </org.eventb.core.prRule>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
        <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prIdent name="newnextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="nextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="terms" org.eventb.core.type="Terms"/>
        <org.eventb.core.prPred name="p51" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p39" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p41" org.eventb.core.predicate="Point⊆Terms"/>
        <org.eventb.core.prPred name="p70" org.eventb.core.predicate="(intentions ∖ {intention})∪{update_intention(intention,nextP,Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}]),belief_base)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p48" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p71" org.eventb.core.predicate="Terms={a,b,c}∪VectorTerms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p58" org.eventb.core.predicate="external_events∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="external_events" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p62" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p68" org.eventb.core.predicate="counter+1=1"/>
        <org.eventb.core.prPred name="p54" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p55" org.eventb.core.predicate="Initial_belief_base∈ℙ(Belief_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Initial_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p42" org.eventb.core.predicate="VectorTerms⊆Terms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p59" org.eventb.core.predicate="intentions∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="¬b=c"/>
        <org.eventb.core.prPred name="p65" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="counter+1=1⇒⊤"/>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p57" org.eventb.core.predicate="belief_base∈ℙ(Belief_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬a=b"/>
        <org.eventb.core.prPred name="p46" org.eventb.core.predicate="plan_rules∈Event_predicate_symbols × Terms ↔ ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p63" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p72" org.eventb.core.predicate="{a,b,c}∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p49" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p47" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p40" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p45" org.eventb.core.predicate="addition_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="addition_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p56" org.eventb.core.predicate="Initial_external_event_set∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Initial_external_event_set" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p69" org.eventb.core.predicate="(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="counter+1=1⇒(intentions ∖ {intention})∪{update_intention(intention,nextP,newnextP,belief_base)}={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p44" org.eventb.core.predicate="deletion_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="deletion_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="event ↦ terms∈dom(plan_rules)"/>
        <org.eventb.core.prPred name="p64" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p66" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p43" org.eventb.core.predicate="preconditions∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="preconditions" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="newnextP=Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])"/>
        <org.eventb.core.prPred name="p60" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="nextP∈next_programs_to_progress(intention,belief_base)"/>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="partition(Point,{a},{b},{c})"/>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p50" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="plan_rules[{event ↦ terms}]≠(∅ ⦂ ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p61" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬a=c"/>
        <org.eventb.core.prPred name="p52" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p53" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="Point={a,b,c}"/>
        <org.eventb.core.prPred name="p67" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="counter+1=1⇒nextP∈next_programs_to_progress(intention,belief_base)"/>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="SelectRelevantPlans/act1/WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="p0" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="p0"/>
        <org.eventb.core.prIdent name="belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="nextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="nextP∈next_programs_to_progress(intention,belief_base)"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="INITIALISATION/inv4/INV" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p2,p3"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2,p3"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p4" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18,p19"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p18,p19"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p26"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p29"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p31"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p32"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p33"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p35" org.eventb.core.prHyps=""/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="partition(Point,{a},{b},{c})">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬a=c">
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬b=c">
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="0∈ℕ"/>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="Point={a,b,c}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬a=b">
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Event_predicate_symbols" org.eventb.core.type="ℙ(Event_predicate_symbols)"/>
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="Action_predicate_symbols" org.eventb.core.type="ℙ(Action_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Terms" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="Belief_predicate_symbols" org.eventb.core.type="ℙ(Belief_predicate_symbols)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="SelectRelevantPlans/inv4/INV" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18,p19,p20,p21,p22,p23,p24,p25,p26,p27,p28,p29,p30,p31,p32,p33" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34,p35"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p34,p35"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p8" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p36,p37,p38,p39"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p36,p37,p38,p39"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p40,p41,p42,p43,p44,p45,p46"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p40,p41,p42,p43,p44,p45,p46"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47,p48"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p47,p48"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p7" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49,p50,p51,p52"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p49,p50,p51,p52"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p53"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p54"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p13" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p55"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p56"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p57" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p58"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p59"/>
                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p60" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
                                                                <org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p62"/>
                                                                <org.eventb.core.prHypAction name="REWRITE5" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
                                                                <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p54" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p64"/>
                                                                <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p66"/>
                                                                        <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p67"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p68"/>
                                                                        <org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p69"/>
                                                                        <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p70"/>
                                                                        <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p71"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p72"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p24" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p73"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE8" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p74"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE9" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p75"/>
                                                                        <org.eventb.core.prHypAction name="HIDE10" org.eventb.core.prHyps="p76"/>
                                                                        <org.eventb.core.prHypAction name="HIDE11" org.eventb.core.prHyps="p77"/>
                                                                        <org.eventb.core.prHypAction name="HIDE12" org.eventb.core.prHyps="p78"/>
                                                                        <org.eventb.core.prHypAction name="HIDE13" org.eventb.core.prHyps="p79"/>
                                                                        <org.eventb.core.prHypAction name="HIDE14" org.eventb.core.prHyps="p80"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE15" org.eventb.core.prHidden="p58" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p81"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE16" org.eventb.core.prHidden="p61" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p82"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE17" org.eventb.core.prHidden="p64" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p83"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE18" org.eventb.core.prHidden="p65" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p84"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'">
                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p72" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p85"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p73" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p86"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p74" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p87"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p75" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p88"/>
                                                                                <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p81"/>
                                                                                <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p82"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p83" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p89"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p84" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p90"/>
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with newnextP=Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])" org.eventb.core.prHyps="p2">
                                                                                    <org.eventb.core.prAnte name="'">
                                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
                                                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with Point={a,b,c}" org.eventb.core.prHyps="p36">
                                                                                            <org.eventb.core.prAnte name="'">
                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p91"/>
                                                                                                <org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p92"/>
                                                                                                <org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p34,p35"/>
                                                                                                <org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p36"/>
                                                                                                <org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ML" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="p21,p14,p9,p5,p27,p28,p16,p6,p32,p17,p4,p23,p19,p3,p11,p10,p31,p34,p35,p36,p37,p38,p39,p40,p41,p42,p43,p44,p45,p46,p47,p48,p49,p50,p51,p52,p56,p59,p62,p63,p85,p86,p87,p88,p89,p90,p91,p92">
                                                                                                    <org.eventb.core.prString name=".arg" org.eventb.core.prSValue="0;1:500"/>
                                                                                                </org.eventb.core.prRule>
                                                                                            </org.eventb.core.prAnte>
                                                                                        </org.eventb.core.prRule>
                                                                                    </org.eventb.core.prAnte>
                                                                                </org.eventb.core.prRule>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="Initial_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="Initial_external_event_set" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
        <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="addition_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
        <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
        <org.eventb.core.prIdent name="deletion_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        <org.eventb.core.prIdent name="event" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="intention" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prIdent name="newnextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        <org.eventb.core.prIdent name="nextP" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="preconditions" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        <org.eventb.core.prIdent name="terms" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p51" org.eventb.core.predicate="¬travel=cry_at"/>
        <org.eventb.core.prPred name="p53" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤"/>
        <org.eventb.core.prPred name="p64" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p66" org.eventb.core.predicate="Point⊆Terms"/>
        <org.eventb.core.prPred name="p43" org.eventb.core.predicate="¬at=next"/>
        <org.eventb.core.prPred name="p61" org.eventb.core.predicate="counter=1⇒arrive_at∈Event_predicate_symbols∧c∈Terms∧plan_rules[{arrive_at ↦ c}]∈ℙ(ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p59" org.eventb.core.predicate="counter=1⇒intentions={Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])}"/>
        <org.eventb.core.prPred name="p49" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}"/>
        <org.eventb.core.prPred name="p72" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p91" org.eventb.core.predicate="Terms={a,b,c}∪VectorTerms"/>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="deletion_sets={terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point ∣ travel ↦ Vector(terms1 ↦ terms2) ↦ (at ↦ terms1)}"/>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms"/>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="basic_program_event_intention(nextP)=event ↦ terms"/>
        <org.eventb.core.prPred name="p58" org.eventb.core.predicate="counter=0⇒arrive_at∈Event_predicate_symbols∧c∈Terms"/>
        <org.eventb.core.prPred name="p79" org.eventb.core.predicate="external_events∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="external_events" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="preconditions={terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point ∣ travel ↦ Vector(terms1 ↦ terms2) ↦ (at ↦ terms1)}∪{terms⦂Terms·terms∈Point ∣ smile_at ↦ terms ↦ (at ↦ terms)}∪{terms⦂Terms·terms∈Point ∣ cry_at ↦ terms ↦ (at ↦ terms)}"/>
        <org.eventb.core.prPred name="p85" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p75" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p76" org.eventb.core.predicate="Initial_belief_base∈ℙ(Belief_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="a ↦ b∈dom(Vector)"/>
        <org.eventb.core.prPred name="p67" org.eventb.core.predicate="VectorTerms⊆Terms"/>
        <org.eventb.core.prPred name="p54" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p80" org.eventb.core.predicate="intentions∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p39" org.eventb.core.predicate="¬b=c"/>
        <org.eventb.core.prPred name="p88" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="intention∈intentions"/>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Vector∈Point × Point ↣ VectorTerms"/>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})"/>
        <org.eventb.core.prPred name="p78" org.eventb.core.predicate="belief_base∈ℙ(Belief_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p55" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤"/>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="counter∈ℕ"/>
        <org.eventb.core.prPred name="p48" org.eventb.core.predicate="¬arrive_at=play_at"/>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="¬a=b"/>
        <org.eventb.core.prPred name="p71" org.eventb.core.predicate="plan_rules∈Event_predicate_symbols × Terms ↔ ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p86" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p92" org.eventb.core.predicate="{a,b,c}∩VectorTerms=(∅ ⦂ ℙ(Terms))"/>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})"/>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p81" org.eventb.core.predicate="counter=0⇒⊤∧⊤"/>
        <org.eventb.core.prPred name="p65" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)"/>
        <org.eventb.core.prPred name="p42" org.eventb.core.predicate="¬at=cried_at"/>
        <org.eventb.core.prPred name="p70" org.eventb.core.predicate="addition_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms"/>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="counter=0⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(arrive_at ↦ c))}"/>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∃basic_program_event_intention0⦂Event_predicate_symbols×Terms·nextP=BasicP_event_intention(basic_program_event_intention0)"/>
        <org.eventb.core.prPred name="p46" org.eventb.core.predicate="¬cried_at=next"/>
        <org.eventb.core.prPred name="p77" org.eventb.core.predicate="Initial_external_event_set∈ℙ(Event_predicate_symbols × Terms)"/>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="counter+1∈ℕ"/>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="counter=1⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}]))}"/>
        <org.eventb.core.prPred name="p69" org.eventb.core.predicate="deletion_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms"/>
        <org.eventb.core.prPred name="p62" org.eventb.core.predicate="event ↦ terms∈dom(plan_rules)"/>
        <org.eventb.core.prPred name="p87" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p89" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p68" org.eventb.core.predicate="preconditions∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms"/>
        <org.eventb.core.prPred name="p63" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="newnextP=Relevant_plans(event ↦ terms,plan_rules[{event ↦ terms}])"/>
        <org.eventb.core.prPred name="p83" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="nextP∈next_programs_to_progress(intention,belief_base)"/>
        <org.eventb.core.prPred name="p41" org.eventb.core.predicate="¬at=smiled_at"/>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="Initial_external_event_set={arrive_at ↦ c}"/>
        <org.eventb.core.prPred name="p47" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}"/>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})"/>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="partition(Point,{a},{b},{c})"/>
        <org.eventb.core.prPred name="p73" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="addition_sets={terms⦂Terms,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧terms=Vector(terms1 ↦ terms2) ∣ travel ↦ terms ↦ (at ↦ terms2)}∪{terms⦂Terms·terms∈Point ∣ cry_at ↦ terms ↦ (cried_at ↦ terms)}∪{terms⦂Terms·terms∈Point ∣ smile_at ↦ terms ↦ (smiled_at ↦ terms)}"/>
        <org.eventb.core.prPred name="p50" org.eventb.core.predicate="¬travel=smile_at"/>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="isBasicP_event_intention(nextP)"/>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="plan_rules[{event ↦ terms}]≠(∅ ⦂ ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p56" org.eventb.core.predicate="counter=0⇒intentions={BasicP_event_intention(arrive_at ↦ c)}"/>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms"/>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="Terms=Point∪VectorTerms"/>
        <org.eventb.core.prPred name="p45" org.eventb.core.predicate="¬smiled_at=next"/>
        <org.eventb.core.prPred name="p84" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)"/>
        <org.eventb.core.prPred name="p57" org.eventb.core.predicate="counter=0⇒BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="a ↦ c∈dom(Vector)"/>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="¬a=c"/>
        <org.eventb.core.prPred name="p74" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}"/>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)"/>
        <org.eventb.core.prPred name="p44" org.eventb.core.predicate="¬smiled_at=cried_at"/>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="Point={a,b,c}"/>
        <org.eventb.core.prPred name="p90" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)"/>
        <org.eventb.core.prPred name="p60" org.eventb.core.predicate="counter=1⇒Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="plan1∪plan2∪plan3∪plan4=plan_rules"/>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="Initial_belief_base={at ↦ a,next ↦ Vector(a ↦ b),next ↦ Vector(b ↦ c),next ↦ Vector(a ↦ c)}"/>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)"/>
        <org.eventb.core.prPred name="p82" org.eventb.core.predicate="counter=1⇒⊤∧⊤∧⊤"/>
        <org.eventb.core.prPred name="p52" org.eventb.core.predicate="¬smile_at=cry_at"/>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))"/>
        <org.eventb.core.prPred name="p40" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}"/>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="b ↦ c∈dom(Vector)"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r5" org.eventb.core.prRID="com.clearsy.atelierb.provers.core.externalML:1"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="inv5/WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p2,p3"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2,p3"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p4" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18,p19"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p18,p19"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p26"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p29"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p31"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p32"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p33"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p57">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p36"/>
                                                                        <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p37"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p38"/>
                                                                        <org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p39"/>
                                                                        <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p40"/>
                                                                        <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p41"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p42" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p43"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p44" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p45"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE8" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE9" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49"/>
                                                                        <org.eventb.core.prHypAction name="HIDE10" org.eventb.core.prHyps="p50"/>
                                                                        <org.eventb.core.prHypAction name="HIDE11" org.eventb.core.prHyps="p51"/>
                                                                        <org.eventb.core.prHypAction name="HIDE12" org.eventb.core.prHyps="p52"/>
                                                                        <org.eventb.core.prHypAction name="HIDE13" org.eventb.core.prHyps="p53"/>
                                                                        <org.eventb.core.prHypAction name="HIDE14" org.eventb.core.prHyps="p54"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE15" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p55"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE16" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p56"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p64">
                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p43" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p58"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p59"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p60"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p62"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE5" org.eventb.core.prHidden="p56" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p64" org.eventb.core.prHyps=""/>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        <org.eventb.core.prPred name="p46" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="Point⊆Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p43" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="counter=0⇒arrive_at∈Event_predicate_symbols∧c∈Terms"/>
        <org.eventb.core.prPred name="p53" org.eventb.core.predicate="external_events∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="external_events" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p58" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p49" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p50" org.eventb.core.predicate="Initial_belief_base∈ℙ(Belief_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Initial_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="VectorTerms⊆Terms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p54" org.eventb.core.predicate="intentions∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬b=c">
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p61" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p52" org.eventb.core.predicate="belief_base∈ℙ(Belief_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬a=b">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p41" org.eventb.core.predicate="plan_rules∈Event_predicate_symbols × Terms ↔ ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)">
            <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p59" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p44" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p42" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p57" org.eventb.core.predicate="counter=0⇒⊤∧⊤"/>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p40" org.eventb.core.predicate="addition_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="addition_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p51" org.eventb.core.predicate="Initial_external_event_set∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Initial_external_event_set" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p39" org.eventb.core.predicate="deletion_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="deletion_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p60" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p62" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="preconditions∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="preconditions" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p55" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="partition(Point,{a},{b},{c})">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p45" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p56" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="counter=0⇒BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬a=c">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p47" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p48" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p64" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="Point={a,b,c}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p63" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="inv6/WD" org.eventb.core.confidence="1000" org.eventb.core.prFresh="" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="Action_predicate_symbols,Belief_predicate_symbols,Event_predicate_symbols,Terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="UserP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_user">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_user" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_user">
                    <org.eventb.theory.core.scConstructorArgument name="head_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_user">
                    <org.eventb.theory.core.scConstructorArgument name="left_user" org.eventb.core.type="UserP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_user" org.eventb.core.type="UserP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_user">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="event_user" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition_user" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scDatatypeDefinition name="IntentionP">
                <org.eventb.theory.core.scTypeArgument name="Belief_predicate_symbols" org.eventb.theory.core.givenType="Belief_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Event_predicate_symbols" org.eventb.theory.core.givenType="Event_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Action_predicate_symbols" org.eventb.theory.core.givenType="Action_predicate_symbols"/>
                <org.eventb.theory.core.scTypeArgument name="Terms" org.eventb.theory.core.givenType="Terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_event_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_event_intention" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="BasicP_action_intention">
                    <org.eventb.theory.core.scConstructorArgument name="basic_program_action_intention" org.eventb.core.type="Action_predicate_symbols×Terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Sequence_intention">
                    <org.eventb.theory.core.scConstructorArgument name="head_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Concurrency_intention">
                    <org.eventb.theory.core.scConstructorArgument name="left_intention" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="right_intention" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Declarative_goal_intention">
                    <org.eventb.theory.core.scConstructorArgument name="success_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="procedural_program" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="failure_condition" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Try_current_with_backups">
                    <org.eventb.theory.core.scConstructorArgument name="current_plan" org.eventb.core.type="IntentionP"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup_plans" org.eventb.core.type="IntentionP"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Relevant_plans">
                    <org.eventb.theory.core.scConstructorArgument name="triggering_event" org.eventb.core.type="Event_predicate_symbols×Terms"/>
                    <org.eventb.theory.core.scConstructorArgument name="set_of_guarded_plan_bodies" org.eventb.core.type="ℙ(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="Nil"/>
                <org.eventb.theory.core.scDatatypeConstructor name="False"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_event_intention" org.eventb.core.label="isBasicP_event_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isBasicP_action_intention" org.eventb.core.label="isBasicP_action_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementI|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSequence_intention" org.eventb.core.label="isSequence_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrency_intention" org.eventb.core.label="isConcurrency_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementA|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isDeclarative_goal_intention" org.eventb.core.label="isDeclarative_goal_intention" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementB|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isTry_current_with_backups" org.eventb.core.label="isTry_current_with_backups" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedual,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementC|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isRelevant_plans" org.eventb.core.label="isRelevant_plans" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementY|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementD|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isFalse" org.eventb.core.label="isFalse" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementZ|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="UserP_to_IntentionP" org.eventb.core.label="UserP_to_IntentionP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="userP" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="userP">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_user(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_user(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_user(success,evt,failure)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(success,(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(evt)),failure)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_user(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(UserP_to_IntentionP(head),UserP_to_IntentionP(tail))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_user(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementW|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="Concurrency_intention(UserP_to_IntentionP(left),UserP_to_IntentionP(right))"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="next_programs_to_progress" org.eventb.core.label="next_programs_to_progress" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_event_intention(basic_program_event)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({BasicP_action_intention(basic_program_action)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="{Relevant_plans(event,guarded_plan_bodies)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)) ◁ (id ⦂ ℙ(ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))×ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))))({False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)})"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="next_programs_to_progress(head,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="next_programs_to_progress(left,current_belief_base)∪next_programs_to_progress(right,current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{belief_base⦂ℙ(Belief_predicate_symbols×Terms),next_programs⦂ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))·((s⊆belief_base∨f⊆belief_base∨isBasicP_event_intention(procedural))∧next_programs={Declarative_goal_intention(s,procedural,f)})∨((s⊈belief_base∧f⊈belief_base∧¬isBasicP_event_intention(procedural))∧next_programs=next_programs_to_progress(procedural,belief_base)) ∣ belief_base ↦ next_programs}(current_belief_base)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementV|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="next_programs_to_progress(current,current_belief_base)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="update_intention" org.eventb.core.label="update_intention" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="new_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="new_program"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(update_intention(head,current_program,new_program,current_belief_base),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new=Concurrency_intention(update_intention(left,current_program,new_program,current_belief_base),right))∨(current∉next_programs_to_progress(left,current_belief_base)∧current∈next_programs_to_progress(right,current_belief_base)∧new=Concurrency_intention(left,update_intention(right,current_program,new_program,current_belief_base))) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current=Declarative_goal_intention(s,procedural,f)∧new=new_program)∨(current≠Declarative_goal_intention(s,procedural,f)∧new=Declarative_goal_intention(s,update_intention(procedural,current_program,new_program,current_belief_base),f)) ∣ current ↦ new}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementX|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="Try_current_with_backups(update_intention(current,current_program,new_program,current_belief_base),backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="NilRemove" org.eventb.core.label="NilRemove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="0" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#0" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),h⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),t⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(h)∧new_intention=t)∨(¬isNil(h)∧new_intention=Sequence_intention(NilRemove(h),t)) ∣ h ↦ t ↦ new_intention}(head ↦ tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r1⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),l2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),r2⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·l2=NilRemove(l1)∧r2=NilRemove(r1)∧((isNil(l2)∧isNil(r2)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨((¬isNil(l2)∨¬isNil(r2))∧new_intention=Concurrency_intention(l2,r2))) ∣ l1 ↦ r1 ↦ new_intention}(left ↦ right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,NilRemove(procedural),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementE|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{new_intention⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(isNil(curr)∧new_intention=(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∨(¬isNil(curr)∧new_intention=Try_current_with_backups(NilRemove(curr),back)) ∣ curr ↦ back ↦ new_intention}(current ↦ backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="get_backup_for_current_plan" org.eventb.core.label="get_backup_for_current_plan" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="current_backup_plans"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="get_backup_for_current_plan(head,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),next_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧next_search=get_backup_for_current_plan(left,current_program,current_belief_base,current_backup_plans))∨(current∈next_programs_to_progress(right,current_belief_base)∧next_search=get_backup_for_current_plan(right,current_program,current_belief_base,current_backup_plans)) ∣ current ↦ next_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="get_backup_for_current_plan(procedural,current_program,current_belief_base,current_backup_plans)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Try_current_with_backups(current,backups)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#elementG|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="get_backup_for_current_plan(current,current_program,current_belief_base,backups)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="failure_recovery" org.eventb.core.label="failure_recovery" org.eventb.core.predicate="current_program∈next_programs_to_progress(current_intention,current_belief_base)∧current_backup_plans=get_backup_for_current_plan(current_intention,current_program,current_belief_base,Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="current_intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_program" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_belief_base" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="current_backup_plans" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="." org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#." org.eventb.theory.core.inductiveArgument="current_intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(basic_program_event))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_action_intention(basic_program_action))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="Relevant_plans(event,guarded_plan_bodies)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="Sequence_intention(failure_recovery(head,current_program,current_belief_base,current_backup_plans),tail)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{current⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(current∈next_programs_to_progress(left,current_belief_base)∧new_search=Concurrency_intention(failure_recovery(left,current,current_belief_base,current_backup_plans),right))∨(current∈next_programs_to_progress(right,current_belief_base)∧new_search=Concurrency_intention(left,failure_recovery(right,current,current_belief_base,current_backup_plans))) ∣ current ↦ new_search}(current_program)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="Declarative_goal_intention(s,failure_recovery(procedural,current_program,current_belief_base,current_backup_plans),f)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element[|org.eventb.theory.core.recursiveOperatorDefinition#.|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{curr⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),back⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms),new_intention_or_search⦂IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base)∧new_intention_or_search=back)∨(¬(back=current_backup_plans∧current_program∈next_programs_to_progress(curr,current_belief_base))∧new_intention_or_search=Try_current_with_backups(failure_recovery(curr,current_program,current_belief_base,current_backup_plans),back)) ∣ curr ↦ back ↦ new_intention_or_search}(current ↦ backup)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="backup_plans_WD" org.eventb.core.label="backup_plans_WD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="intention" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="intention">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="BasicP_event_intention(basic_program_event)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="BasicP_action_intention(basic_program_action)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="-" org.eventb.core.expression="Relevant_plans(event,guarded_plan_bodies)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#-" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="." org.eventb.core.expression="Nil ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#." org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="/" org.eventb.core.expression="False ⦂ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#\/" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="Sequence_intention(head,tail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="backup_plans_WD(head)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="Concurrency_intention(left,right)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="backup_plans_WD(left)∧backup_plans_WD(right)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="Declarative_goal_intention(s,procedural,f)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="isBasicP_event_intention(procedural)∨(isTry_current_with_backups(procedural)∧isBasicP_event_intention(backup_plans(procedural))∧backup_plans_WD(current_plan(procedural)))"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="Try_current_with_backups(current,backup)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element]|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="isRelevant_plans(backup)∧backup_plans_WD(current)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Terms,Point,VectorTerms))" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'">
                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p1" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p2,p3"/>
                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2,p3"/>
                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Point,{a},{b},{c}))" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'">
                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p4" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p5,p6,p7,p8"/>
                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next}))" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'">
                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p10,p11,p12,p13,p14,p15,p16"/>
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Event_predicate_symbols,{arrive_at},{play_at}))" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'">
                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18,p19"/>
                                        <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p18,p19"/>
                                        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Partition rewrites in hyp (partition(Action_predicate_symbols,{travel},{smile_at},{cry_at}))" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'">
                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p21,p22,p23,p24"/>
                                                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p26"/>
                                                        <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p29"/>
                                                        <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p31"/>
                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p32" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p33"/>
                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p35"/>
                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p36"/>
                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p37"/>
                                                                <org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p38"/>
                                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
                                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p62">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p40"/>
                                                                        <org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p41"/>
                                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p42"/>
                                                                        <org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p43"/>
                                                                        <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p44"/>
                                                                        <org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p45"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE7" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE8" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p51"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE9" org.eventb.core.prHidden="p52" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p53"/>
                                                                        <org.eventb.core.prHypAction name="HIDE10" org.eventb.core.prHyps="p54"/>
                                                                        <org.eventb.core.prHypAction name="HIDE11" org.eventb.core.prHyps="p55"/>
                                                                        <org.eventb.core.prHypAction name="HIDE12" org.eventb.core.prHyps="p56"/>
                                                                        <org.eventb.core.prHypAction name="HIDE13" org.eventb.core.prHyps="p57"/>
                                                                        <org.eventb.core.prHypAction name="HIDE14" org.eventb.core.prHyps="p58"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE15" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p59"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE16" org.eventb.core.prHidden="p37" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p60"/>
                                                                        <org.eventb.core.prHypAction name="REWRITE17" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
                                                                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="">
                                                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p69">
                                                                                <org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p64"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p66"/>
                                                                                <org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p59"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE5" org.eventb.core.prHidden="p60" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p67"/>
                                                                                <org.eventb.core.prHypAction name="REWRITE6" org.eventb.core.prHidden="p61" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p68"/>
                                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p69" org.eventb.core.prHyps=""/>
                                                                            </org.eventb.core.prAnte>
                                                                        </org.eventb.core.prRule>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                    <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
            <org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
        </org.eventb.core.prRule>
        <org.eventb.core.prIdent name="arrive_at" org.eventb.core.type="Event_predicate_symbols"/>
        <org.eventb.core.prIdent name="c" org.eventb.core.type="Terms"/>
        <org.eventb.core.prIdent name="counter" org.eventb.core.type="ℤ"/>
        <org.eventb.core.prIdent name="plan_rules" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
        <org.eventb.core.prPred name="p50" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="¬travel=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p26" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p37" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p40" org.eventb.core.predicate="Point⊆Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬at=next">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p39" org.eventb.core.predicate="counter=1⇒arrive_at∈Event_predicate_symbols∧c∈Terms∧plan_rules[{arrive_at ↦ c}]∈ℙ(ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="Action_predicate_symbols={travel,smile_at,cry_at}">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p47" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p27" org.eventb.core.predicate="Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p35" org.eventb.core.predicate="counter=0⇒arrive_at∈Event_predicate_symbols∧c∈Terms"/>
        <org.eventb.core.prPred name="p57" org.eventb.core.predicate="external_events∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="external_events" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p30" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p63" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p53" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p54" org.eventb.core.predicate="Initial_belief_base∈ℙ(Belief_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Initial_belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p41" org.eventb.core.predicate="VectorTerms⊆Terms">
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p29" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p58" org.eventb.core.predicate="intentions∈ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))">
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬b=c">
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p66" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="partition(Event_predicate_symbols,{arrive_at},{play_at})">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p56" org.eventb.core.predicate="belief_base∈ℙ(Belief_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="belief_base" org.eventb.core.type="ℙ(Belief_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p31" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧⊤">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="¬arrive_at=play_at">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬a=b">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p45" org.eventb.core.predicate="plan_rules∈Event_predicate_symbols × Terms ↔ ℙ(Belief_predicate_symbols × Terms) × UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p64" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="partition(Belief_predicate_symbols,{at},{smiled_at},{cried_at},{next})">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p48" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p46" org.eventb.core.predicate="plan1={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2),next ↦ Vector(terms2 ↦ terms3)}∧plan_body_program=Sequence_user(BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)),Sequence_user(Declarative_goal_user({smiled_at ↦ terms2},play_at ↦ terms2,{cried_at ↦ terms2}),BasicP_action_user(travel ↦ Vector(terms2 ↦ terms3)))) ∣ event ↦ terms3 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan1" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p59" org.eventb.core.predicate="counter=0⇒⊤∧⊤"/>
        <org.eventb.core.prPred name="p38" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬at=cried_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p44" org.eventb.core.predicate="addition_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="addition_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p32" org.eventb.core.predicate="counter=0⇒intentions={(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))(BasicP_event_intention(arrive_at ↦ c))}">
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬cried_at=next">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p55" org.eventb.core.predicate="Initial_external_event_set∈ℙ(Event_predicate_symbols × Terms)">
            <org.eventb.core.prIdent name="Initial_external_event_set" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p43" org.eventb.core.predicate="deletion_sets∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="deletion_sets" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p65" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p67" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p42" org.eventb.core.predicate="preconditions∈Action_predicate_symbols × Terms ↔ Belief_predicate_symbols × Terms">
            <org.eventb.core.prIdent name="preconditions" org.eventb.core.type="ℙ(Action_predicate_symbols×Terms×(Belief_predicate_symbols×Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p36" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p60" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬at=smiled_at">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="Event_predicate_symbols={arrive_at,play_at}">
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="partition(Point,{a},{b},{c})">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="partition(Action_predicate_symbols,{travel},{smile_at},{cry_at})">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p49" org.eventb.core.predicate="plan2={event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at∧context={at ↦ terms1,next ↦ Vector(terms1 ↦ terms2)}∧plan_body_program=BasicP_action_user(travel ↦ Vector(terms1 ↦ terms2)) ∣ event ↦ terms2 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan2" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬travel=smile_at">
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="travel" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p33" org.eventb.core.predicate="counter=0⇒intentions={BasicP_event_intention(arrive_at ↦ c)}">
            <org.eventb.core.prIdent name="intentions" org.eventb.core.type="ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p25" org.eventb.core.predicate="∀terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="Terms=Point∪VectorTerms">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬smiled_at=next">
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p61" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·⊤∧terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p34" org.eventb.core.predicate="counter=0⇒BasicP_event_intention(arrive_at ↦ c)∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬a=c">
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p51" org.eventb.core.predicate="plan3={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·⊤∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(smile_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan3" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p52" org.eventb.core.predicate="plan4={event⦂Event_predicate_symbols,terms1⦂Terms,context⦂ℙ(Belief_predicate_symbols×Terms),plan_body_program⦂UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)·event∈Event_predicate_symbols∧terms1∈Point∧event=play_at∧context={at ↦ terms1}∧plan_body_program=BasicP_action_user(cry_at ↦ terms1) ∣ event ↦ terms1 ↦ (context ↦ plan_body_program)}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="plan4" org.eventb.core.type="ℙ(Event_predicate_symbols×Terms×(ℙ(Belief_predicate_symbols×Terms)×UserP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))"/>
            <org.eventb.core.prIdent name="play_at" org.eventb.core.type="Event_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="partition(Terms,Point,VectorTerms)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p69" org.eventb.core.predicate="⊤"/>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬smiled_at=cried_at">
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="Point={a,b,c}">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="a" org.eventb.core.type="Terms"/>
            <org.eventb.core.prIdent name="b" org.eventb.core.type="Terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p68" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms·terms1∈Point∧terms2∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="counter=1⇒Relevant_plans(arrive_at ↦ c,plan_rules[{arrive_at ↦ c}])∈dom(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms))))∧IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ◁ (id ⦂ ℙ(IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)×IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)))∈IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms) ⇸ IntentionP(Belief_predicate_symbols,Event_predicate_symbols,Action_predicate_symbols,Terms)"/>
        <org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀event⦂Event_predicate_symbols,terms1⦂Terms,terms2⦂Terms,terms3⦂Terms·event∈Event_predicate_symbols∧terms1∈Point∧terms2∈Point∧terms3∈Point∧event=arrive_at⇒terms1 ↦ terms2∈dom(Vector)∧Vector∈Terms × Terms ⇸ Terms∧terms2 ↦ terms3∈dom(Vector)">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="Vector" org.eventb.core.type="ℙ(Terms×Terms×Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p62" org.eventb.core.predicate="counter=1⇒⊤∧⊤∧⊤"/>
        <org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬smile_at=cry_at">
            <org.eventb.core.prIdent name="cry_at" org.eventb.core.type="Action_predicate_symbols"/>
            <org.eventb.core.prIdent name="smile_at" org.eventb.core.type="Action_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="Point∩VectorTerms=(∅ ⦂ ℙ(Terms))">
            <org.eventb.core.prIdent name="Point" org.eventb.core.type="ℙ(Terms)"/>
            <org.eventb.core.prIdent name="VectorTerms" org.eventb.core.type="ℙ(Terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="Belief_predicate_symbols={at,smiled_at,cried_at,next}">
            <org.eventb.core.prIdent name="at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="cried_at" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="next" org.eventb.core.type="Belief_predicate_symbols"/>
            <org.eventb.core.prIdent name="smiled_at" org.eventb.core.type="Belief_predicate_symbols"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL4"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.partitionRewrites"/>
    </org.eventb.core.prProof>
</org.eventb.core.prFile>

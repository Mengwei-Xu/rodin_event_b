<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.prFile version="1">
    <org.eventb.core.prProof name="GetNonBeliefPred/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="fail,ag,back,ag1,succes,agrec,ag2" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="AgentPrograms">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessConditions" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="DGGoalPlanBodies" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureConditions" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="nonGoal">
                    <org.eventb.theory.core.scConstructorArgument name="NDGGoalPlanBodies" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="lhd">
                    <org.eventb.theory.core.scConstructorArgument name="currentplan" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="seq">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="AgentPrograms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="AgentPrograms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="nil"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoal" org.eventb.core.label="isGoal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNonGoal" org.eventb.core.label="isNonGoal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="element1" org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#element1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isLhd" org.eventb.core.label="isLhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeq" org.eventb.core.label="isSeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="element1" org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#element1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrent" org.eventb.core.label="isConcurrent" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="WellCons" org.eventb.core.label="WellCons" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="isNonGoal(agrec)∨isLhd(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="WellCons(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="WellCons(ag1)∧WellCons(ag2)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="WellCons(ag1)∧WellCons(ag2)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetNonBeliefPred" org.eventb.core.label="GetNonBeliefPred" org.eventb.core.predicate="WellCons(ag)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(non_belief_predicates×terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{nonbeliedpred}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="∅ ⦂ ℙ(non_belief_predicates×terms)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GetNonBeliefPred(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetNonBeliefPred(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetNonBeliefPred(ag1)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetNonBeliefPred(ag1)∪GetNonBeliefPred(ag2)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees agrec,fail,succes)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                        <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="fail" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                                        <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p6">
                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=goal(succes,agrec,fail)" org.eventb.core.prHyps="p6">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p8"/>
                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p6"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees agrec,back)" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
                                        <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="back" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p11">
                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=lhd(agrec,back)" org.eventb.core.prHyps="p11">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p12"/>
                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p11"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p13">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag1,ag2)" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
                                        <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p15">
                                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=seq(ag1,ag2)" org.eventb.core.prHyps="p15">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p17"/>
                                                        <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                        <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p15"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                            <org.eventb.core.prAnte name="*" org.eventb.core.prGoal="p18">
                                <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag1,ag2)" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
                                        <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p20">
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=concurrent(ag1,ag2)" org.eventb.core.prHyps="p20">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p22"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p20"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p23">
                                                        <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=concurrent(ag1,ag2)" org.eventb.core.prHyps="p20">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p22"/>
                                                                <org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
                                                                <org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p20"/>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="WellCons(agrec)">
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p20" org.eventb.core.predicate="ag=concurrent(ag1,ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="WellCons(ag)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="ag=goal(succes,agrec,fail)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="fail" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="ag=goal(succes,agrec,fail)⇒WellCons(agrec)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="fail" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p18" org.eventb.core.predicate="∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀ag⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·WellCons(ag)⇒(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),fail⦂ℙ(belief_predicates×terms),succes⦂ℙ(belief_predicates×terms)·ag=goal(succes,agrec,fail)⇒WellCons(agrec))∧(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),back⦂ℙ(non_belief_predicates)×terms·ag=lhd(agrec,back)⇒WellCons(agrec))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=seq(ag1,ag2)⇒WellCons(ag1))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2))"/>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="WellCons(ag)⇒(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),fail⦂ℙ(belief_predicates×terms),succes⦂ℙ(belief_predicates×terms)·ag=goal(succes,agrec,fail)⇒WellCons(agrec))∧(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),back⦂ℙ(non_belief_predicates)×terms·ag=lhd(agrec,back)⇒WellCons(agrec))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=seq(ag1,ag2)⇒WellCons(ag1))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2))">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="ag=lhd(agrec,back)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="back" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p19" org.eventb.core.predicate="ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p13" org.eventb.core.predicate="∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=seq(ag1,ag2)⇒WellCons(ag1)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p23" org.eventb.core.predicate="WellCons(ag2)">
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p15" org.eventb.core.predicate="ag=seq(ag1,ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p21" org.eventb.core.predicate="WellCons(ag1)∧WellCons(ag2)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="WellCons(goal(succes,agrec,fail))">
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="fail" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
            <org.eventb.core.prIdent name="succes" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),back⦂ℙ(non_belief_predicates)×terms·ag=lhd(agrec,back)⇒WellCons(agrec)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="ag=lhd(agrec,back)⇒WellCons(agrec)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="back" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),fail⦂ℙ(belief_predicates×terms),succes⦂ℙ(belief_predicates×terms)·ag=goal(succes,agrec,fail)⇒WellCons(agrec)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),fail⦂ℙ(belief_predicates×terms),succes⦂ℙ(belief_predicates×terms)·ag=goal(succes,agrec,fail)⇒WellCons(agrec))∧(∀agrec⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),back⦂ℙ(non_belief_predicates)×terms·ag=lhd(agrec,back)⇒WellCons(agrec))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=seq(ag1,ag2)⇒WellCons(ag1))∧(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒WellCons(ag1)∧WellCons(ag2))">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p14" org.eventb.core.predicate="ag=seq(ag1,ag2)⇒WellCons(ag1)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p22" org.eventb.core.predicate="WellCons(concurrent(ag1,ag2))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p17" org.eventb.core.predicate="WellCons(seq(ag1,ag2))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p12" org.eventb.core.predicate="WellCons(lhd(agrec,back))">
            <org.eventb.core.prIdent name="agrec" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="back" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p16" org.eventb.core.predicate="WellCons(ag1)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="remove/Op-WD" org.eventb.core.confidence="0" org.eventb.core.prFresh="ag,ag1bis,ag2bis,ag1,non_belief,ag2" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="belief_predicates,non_belief_predicates,terms">
        <org.eventb.core.lang name="L">
            <org.eventb.theory.core.scDatatypeDefinition name="AgentPrograms">
                <org.eventb.theory.core.scTypeArgument name="belief_predicates" org.eventb.theory.core.givenType="belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="non_belief_predicates" org.eventb.theory.core.givenType="non_belief_predicates"/>
                <org.eventb.theory.core.scTypeArgument name="terms" org.eventb.theory.core.givenType="terms"/>
                <org.eventb.theory.core.scDatatypeConstructor name="goal">
                    <org.eventb.theory.core.scConstructorArgument name="SuccessConditions" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                    <org.eventb.theory.core.scConstructorArgument name="DGGoalPlanBodies" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="FailureConditions" org.eventb.core.type="ℙ(belief_predicates×terms)"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="nonGoal">
                    <org.eventb.theory.core.scConstructorArgument name="NDGGoalPlanBodies" org.eventb.core.type="non_belief_predicates×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="lhd">
                    <org.eventb.theory.core.scConstructorArgument name="currentplan" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="backup" org.eventb.core.type="ℙ(non_belief_predicates)×terms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="seq">
                    <org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="AgentPrograms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="concurrent">
                    <org.eventb.theory.core.scConstructorArgument name="left" org.eventb.core.type="AgentPrograms"/>
                    <org.eventb.theory.core.scConstructorArgument name="right" org.eventb.core.type="AgentPrograms"/>
                </org.eventb.theory.core.scDatatypeConstructor>
                <org.eventb.theory.core.scDatatypeConstructor name="nil"/>
            </org.eventb.theory.core.scDatatypeDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isGoal" org.eventb.core.label="isGoal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNonGoal" org.eventb.core.label="isNonGoal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="element1" org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#element1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element1|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isLhd" org.eventb.core.label="isLhd" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element2|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isSeq" org.eventb.core.label="isSeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="element1" org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#element1" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element3|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isConcurrent" org.eventb.core.label="isConcurrent" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element4|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊤"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="⊥"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element9|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="⊥"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="WellCons" org.eventb.core.label="WellCons" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="⊤"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="isNonGoal(agrec)∨isLhd(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="WellCons(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="WellCons(ag1)∧WellCons(ag2)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element5|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="WellCons(ag1)∧WellCons(ag2)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="GetNonBeliefPred" org.eventb.core.label="GetNonBeliefPred" org.eventb.core.predicate="WellCons(ag)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(non_belief_predicates×terms)" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliedpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{nonbeliedpred}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="∅ ⦂ ℙ(non_belief_predicates×terms)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="GetNonBeliefPred(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="GetNonBeliefPred(agrec)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="GetNonBeliefPred(ag1)"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="GetNonBeliefPred(ag1)∪GetNonBeliefPred(ag2)"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
            <org.eventb.theory.core.scNewOperatorDefinition name="remove" org.eventb.core.label="remove" org.eventb.core.predicate="⊤" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(AgentPrograms(belief_predicates,non_belief_predicates,terms))" org.eventb.theory.core.wd="⊤">
                <org.eventb.theory.core.scOperatorArgument name="ag" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                <org.eventb.theory.core.scOperatorArgument name="non_belief" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="non_belief_predicates×terms"/>
                <org.eventb.theory.core.scRecursiveOperatorDefinition name="element1" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1" org.eventb.theory.core.inductiveArgument="ag">
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="nonGoal(nonbeliefpred)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{a⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·a∈AgentPrograms(belief_predicates,non_belief_predicates,terms)∧((a=(nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms))∧nonbeliefpred=non_belief)∨(a=nonGoal(nonbeliefpred)∧nonbeliefpred≠non_belief)) ∣ a}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="," org.eventb.core.expression="nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#," org.eventb.theory.core.formula="{a⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·a=(nil ⦂ AgentPrograms(belief_predicates,non_belief_predicates,terms))∧a∈AgentPrograms(belief_predicates,non_belief_predicates,terms) ∣ a}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="goal(succes,agrec,fail)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="{agbis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·agbis∈remove(agrec,non_belief) ∣ goal(succes,agbis,fail)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="lhd(agrec,back)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="{agbis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·agbis∈remove(agrec,non_belief) ∣ lhd(agbis,back)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="*" org.eventb.core.expression="seq(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#*" org.eventb.theory.core.formula="{agbis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·agbis∈remove(ag2,non_belief) ∣ seq(agbis,ag2)}"/>
                    <org.eventb.theory.core.scRecursiveDefinitionCase name="+" org.eventb.core.expression="concurrent(ag1,ag2)" org.eventb.core.source="/BasicTheory/AgentProgramConstructor.tuf|org.eventb.theory.core.theoryRoot#AgentProgramConstructor|org.eventb.theory.core.newOperatorDefinition#element8|org.eventb.theory.core.recursiveOperatorDefinition#element1|org.eventb.theory.core.recursiveDefinitionCase#+" org.eventb.theory.core.formula="{ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨(ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(non_belief∈GetNonBeliefPred(ag1)∧non_belief∈GetNonBeliefPred(ag2)∧ag1bis=ag1∧ag2bis=ag2) ∣ concurrent(ag1bis,ag2bis)}"/>
                </org.eventb.theory.core.scRecursiveOperatorDefinition>
            </org.eventb.theory.core.scNewOperatorDefinition>
        </org.eventb.core.lang>
        <org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
                <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag,non_belief,ag1,ag2)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
                        <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                        <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
                        <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                        <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                        <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
                                <org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag1bis,ag2bis)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
                                                <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
                                                    <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p7,p8">
                                                        <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=concurrent(ag1,ag2)" org.eventb.core.prHyps="p3">
                                                            <org.eventb.core.prAnte name="'">
                                                                <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p3"/>
                                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag2bis=ag2" org.eventb.core.prHyps="p8">
                                                                    <org.eventb.core.prAnte name="'">
                                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
                                                                    </org.eventb.core.prAnte>
                                                                </org.eventb.core.prRule>
                                                            </org.eventb.core.prAnte>
                                                        </org.eventb.core.prRule>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                    <org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
                                        <org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees ag1bis,ag2bis)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
                                            <org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
                                                <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
                                                <org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with ag=concurrent(ag1,ag2)" org.eventb.core.prHyps="p3">
                                                    <org.eventb.core.prAnte name="'">
                                                        <org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p3"/>
                                                    </org.eventb.core.prAnte>
                                                </org.eventb.core.prRule>
                                            </org.eventb.core.prAnte>
                                        </org.eventb.core.prRule>
                                    </org.eventb.core.prAnte>
                                </org.eventb.core.prRule>
                            </org.eventb.core.prAnte>
                        </org.eventb.core.prRule>
                    </org.eventb.core.prAnte>
                </org.eventb.core.prRule>
            </org.eventb.core.prAnte>
        </org.eventb.core.prRule>
        <org.eventb.core.prPred name="p3" org.eventb.core.predicate="ag=concurrent(ag1,ag2)">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p7" org.eventb.core.predicate="ag1bis∈remove(ag1,non_belief)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2)))))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀ag⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),non_belief⦂non_belief_predicates×terms,ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1))∧(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2))))))"/>
        <org.eventb.core.prPred name="p2" org.eventb.core.predicate="ag=concurrent(ag1,ag2)⇒(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1))∧(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2))))))">
            <org.eventb.core.prIdent name="ag" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p6" org.eventb.core.predicate="ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p8" org.eventb.core.predicate="ag2bis=ag2">
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p11" org.eventb.core.predicate="(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2)))))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag1bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2bis" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p4" org.eventb.core.predicate="(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1))∧(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2))))))">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="ag2" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
            <org.eventb.core.prIdent name="non_belief" org.eventb.core.type="non_belief_predicates×terms"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀ag⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),non_belief⦂non_belief_predicates×terms·⊤⇒(∀ag1⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·ag=concurrent(ag1,ag2)⇒(∀ag1bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms),ag2bis⦂AgentPrograms(belief_predicates,non_belief_predicates,terms)·(ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2⇒WellCons(ag1))∧((ag1bis∈remove(ag1,non_belief)∧ag2bis=ag2∧non_belief∈GetNonBeliefPred(ag1))∨((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1⇒WellCons(ag2))∧((ag2bis∈remove(ag2,non_belief)∧ag1bis=ag1∧non_belief∈GetNonBeliefPred(ag2))∨(WellCons(ag1)∧(non_belief∈GetNonBeliefPred(ag1)⇒WellCons(ag2))))))))"/>
        <org.eventb.core.prPred name="p9" org.eventb.core.predicate="WellCons(ag1)">
            <org.eventb.core.prIdent name="ag1" org.eventb.core.type="AgentPrograms(belief_predicates,non_belief_predicates,terms)"/>
        </org.eventb.core.prPred>
        <org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL5:0"/>
        <org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
        <org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqL2:1"/>
        <org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
        <org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
    </org.eventb.core.prProof>
    <org.eventb.core.prProof name="UserP2Plan_body/Op-WD"/>
    <org.eventb.core.prProof name="GetFirsts/Op-WD"/>
    <org.eventb.core.prProof name="update/Op-WD"/>
</org.eventb.core.prFile>
